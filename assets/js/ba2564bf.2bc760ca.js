"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2815],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=l(n),d=o,h=m["".concat(c,".").concat(d)]||m[d]||p[d]||a;return n?r.createElement(h,s(s({ref:t},u),{},{components:n})):r.createElement(h,s({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},41511:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),s=["components"],i={sidebar_position:1,sidebar_label:"Introduction",pagination_label:"Promises: Introduction"},c="Promises",l={unversionedId:"sdk/rust/promises/intro",id:"sdk/rust/promises/intro",title:"Promises",description:'Transactions can be sent asynchronously from a contract through a Promise. Like Promises in many programming languages, these will cause code to be executed in the future. In the case of NEAR, this "in the future" means a transaction to be executed in the next block_ (or thereabouts), rather than in the same block as the original function call.',source:"@site/../docs/sdk/rust/promises/intro.md",sourceDirName:"sdk/rust/promises",slug:"/sdk/rust/promises/intro",permalink:"/sdk/rust/promises/intro",draft:!1,editUrl:"https://github.com/near/docs/edit/master/website/../docs/sdk/rust/promises/intro.md",tags:[],version:"current",lastUpdatedBy:"[sm-stack]",lastUpdatedAt:1675844989,formattedLastUpdatedAt:"Feb 8, 2023",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Introduction",pagination_label:"Promises: Introduction"},sidebar:"sdk",previous:{title:"Callbacks",permalink:"/sdk/rust/cross-contract/callbacks"},next:{title:"Sending $NEAR",permalink:"/sdk/rust/promises/token-tx"}},u={},p=[],m={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"promises"},"Promises"),(0,a.kt)("p",null,"Transactions can be sent asynchronously from a contract through a ",(0,a.kt)("a",{parentName:"p",href:"https://docs.rs/near-sdk/latest/near_sdk/struct.Promise.html"},(0,a.kt)("inlineCode",{parentName:"a"},"Promise")),'. Like Promises in many programming languages, these will cause code to be executed in the future. In the case of NEAR, this "in the future" means a transaction to be executed ',(0,a.kt)("em",{parentName:"p"},"in the next block")," (or thereabouts), rather than in the same block as the original function call."),(0,a.kt)("p",null,"You can implement any cross-contract workflow using Promises; they inhabit a middle-ground between the high-level and low-level approaches discussed in ",(0,a.kt)("a",{parentName:"p",href:"/sdk/rust/cross-contract/callbacks"},"the last section"),". See the full Promise docs, linked above, for details."),(0,a.kt)("p",null,"However, there are a few situations where Promises are uniquely capable, since these situations don't involve making function calls:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Sending $NEAR"),(0,a.kt)("li",{parentName:"ul"},"Creating accounts"),(0,a.kt)("li",{parentName:"ul"},"Deploying contracts")),(0,a.kt)("admonition",{title:"Why wait?",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Why not do these things synchronously, in the same block when the function is called? Why does NEAR require a ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise")," for sending tokens, or creating an account, or deploying a contract?"),(0,a.kt)("p",{parentName:"admonition"},'They need to be scheduled in separate blocks since sender and receiver accounts can be on different shards, and cross-shard communication happens across blocks by passing receipts (you can think of receipts in NEAR as "internal transactions"). You can see these receipts being passed from block to block ',(0,a.kt)("a",{parentName:"p",href:"https://explorer.near.org/transactions/36n3tBNiF497Tm9mijEpsCUvejL8mBYF1CEWthCnY8FV"},"in NEAR Explorer"),".")))}d.isMDXComponent=!0}}]);