"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6318],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),i=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=i(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=i(n),m=o,k=d["".concat(s,".").concat(m)]||d[m]||u[m]||c;return n?a.createElement(k,r(r({ref:t},p),{},{components:n})):a.createElement(k,r({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,r=new Array(c);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var i=2;i<c;i++)r[i]=n[i];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(67294),o=n(86010);const c="tabItem_Ymn6";function r(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(c,r),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(87462),o=n(67294),c=n(86010),r=n(72389),l=n(67392),s=n(7094),i=n(12466);const p="tabList__CuJ",u="tabItem_LNqP";function d(e){var t,n,r=e.lazy,d=e.block,m=e.defaultValue,k=e.values,h=e.groupId,y=e.className,g=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),N=null!=k?k:g.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),f=(0,l.l)(N,(function(e,t){return e.value===t.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===m?m:null!=(t=null!=m?m:null==(n=g.find((function(e){return e.props.default})))?void 0:n.props.value)?t:g[0].props.value;if(null!==b&&!N.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+N.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=(0,s.U)(),v=w.tabGroupChoices,C=w.setTabGroupChoices,A=(0,o.useState)(b),j=A[0],S=A[1],I=[],T=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var x=v[h];null!=x&&x!==j&&N.some((function(e){return e.value===x}))&&S(x)}var E=function(e){var t=e.currentTarget,n=I.indexOf(t),a=N[n].value;a!==j&&(T(t),S(a),null!=h&&C(h,String(a)))},K=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a,o=I.indexOf(e.currentTarget)+1;n=null!=(a=I[o])?a:I[0];break;case"ArrowLeft":var c,r=I.indexOf(e.currentTarget)-1;n=null!=(c=I[r])?c:I[I.length-1]}null==(t=n)||t.focus()};return o.createElement("div",{className:(0,c.Z)("tabs-container",p)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":d},y)},N.map((function(e){var t=e.value,n=e.label,r=e.attributes;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:j===t?0:-1,"aria-selected":j===t,key:t,ref:function(e){return I.push(e)},onKeyDown:K,onFocus:E,onClick:E},r,{className:(0,c.Z)("tabs__item",u,null==r?void 0:r.className,{"tabs__item--active":j===t})}),null!=n?n:t)}))),r?(0,o.cloneElement)(g.filter((function(e){return e.props.value===j}))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},g.map((function(e,t){return(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==j})}))))}function m(e){var t=(0,r.Z)();return o.createElement(d,(0,a.Z)({key:String(t)},e))}},92079:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>h,frontMatter:()=>i,metadata:()=>u,toc:()=>m});var a=n(87462),o=n(63366),c=(n(67294),n(3905)),r=n(65488),l=n(85162),s=["components"],i={id:"quick-reference",title:"Using JavaScript API to interact with NEAR",sidebar_label:"Using JavaScript API"},p=void 0,u={unversionedId:"tools/near-api-js/quick-reference",id:"tools/near-api-js/quick-reference",title:"Using JavaScript API to interact with NEAR",description:"",source:"@site/../docs/4.tools/near-api-js/quick-reference.md",sourceDirName:"4.tools/near-api-js",slug:"/tools/near-api-js/quick-reference",permalink:"/near-docs-kor/tools/near-api-js/quick-reference",draft:!1,editUrl:"https://github.com/near/docs/edit/master/website/../docs/4.tools/near-api-js/quick-reference.md",tags:[],version:"current",lastUpdatedBy:"[sm-stack]",lastUpdatedAt:1675844989,formattedLastUpdatedAt:"Feb 8, 2023",frontMatter:{id:"quick-reference",title:"Using JavaScript API to interact with NEAR",sidebar_label:"Using JavaScript API"},sidebar:"develop",previous:{title:"NEAR Wallet Selector",permalink:"/near-docs-kor/tools/wallet-selector"},next:{title:"Cookbook",permalink:"/near-docs-kor/tools/near-api-js/cookbook"}},d={},m=[{value:"What is <code>near-api-js</code>",id:"what-is-near-api-js",level:2},{value:"Install",id:"install",level:2},{value:"Import",id:"import",level:2},{value:"Key Store",id:"key-store",level:2},{value:"Connecting to NEAR",id:"connect",level:2},{value:"Interacting with the Wallet",id:"wallet",level:2},{value:"Creating Wallet Connection",id:"wallet-connection",level:3},{value:"Ask your user to Sign In",id:"sign-in",level:3},{value:"Sign Out on behalf of your user",id:"sign-out",level:3},{value:"Check if Signed In",id:"check-if-signed-in",level:3},{value:"Get Authorized Account Id",id:"get-authorized-account-id",level:3},{value:"Get Authorized Account Object",id:"get-authorized-account-object",level:3},{value:"Account",id:"account",level:2},{value:"Load Account",id:"load-account",level:3},{value:"Create Account",id:"create-account",level:3},{value:"Delete Account",id:"delete-account",level:3},{value:"Get Account Balance",id:"get-account-balance",level:3},{value:"Get Account details",id:"get-account-details",level:3},{value:"Deploy a Contract",id:"deploy-a-contract",level:3},{value:"Send Tokens",id:"send-tokens",level:3},{value:"State",id:"state",level:3},{value:"Access Keys",id:"access-keys",level:3},{value:"Add Full Access Key",id:"add-full-access-key",level:4},{value:"Add Function Access Key",id:"add-function-access-key",level:4},{value:"Get All Access Keys",id:"get-all-access-keys",level:4},{value:"Delete Access Key",id:"delete-access-key",level:4},{value:"Contract",id:"contract",level:2},{value:"Load Contract",id:"load-contract",level:3},{value:"Call Contract",id:"call-contract",level:3},{value:"Utils",id:"utils",level:2},{value:"NEAR =&gt; yoctoNEAR",id:"near--yoctonear",level:3},{value:"YoctoNEAR =&gt; NEAR",id:"yoctonear--near",level:3}],k={toc:m};function h(e){var t=e.components,n=(0,o.Z)(e,s);return(0,c.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h2",{id:"what-is-near-api-js"},"What is ",(0,c.kt)("inlineCode",{parentName:"h2"},"near-api-js")),(0,c.kt)("p",null,(0,c.kt)("inlineCode",{parentName:"p"},"near-api-js")," is a complete library to interact with the NEAR blockchain. You can use it in the browser, or in Node.js runtime."),(0,c.kt)("p",null,"You'll typically first create a connection to NEAR with ",(0,c.kt)("a",{parentName:"p",href:"#connect"},(0,c.kt)("inlineCode",{parentName:"a"},"connect"))," using a ",(0,c.kt)("a",{parentName:"p",href:"#key-store"},(0,c.kt)("inlineCode",{parentName:"a"},"KeyStore")),".\nWith the connection object you now can:"),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},"Interact with the ",(0,c.kt)("a",{parentName:"li",href:"#wallet"},"Wallet")," in a browser."),(0,c.kt)("li",{parentName:"ul"},"Instantiate an ",(0,c.kt)("a",{parentName:"li",href:"#account"},"Account")," object to:",(0,c.kt)("ul",{parentName:"li"},(0,c.kt)("li",{parentName:"ul"},"Send tokens"),(0,c.kt)("li",{parentName:"ul"},"Deploy contracts"),(0,c.kt)("li",{parentName:"ul"},"Inspect, create or delete accounts"),(0,c.kt)("li",{parentName:"ul"},"Manage keys for accounts."))),(0,c.kt)("li",{parentName:"ul"},"Instantiate a ",(0,c.kt)("a",{parentName:"li",href:"#contract"},"Contract")," object to call smart contract methods.")),(0,c.kt)("p",null,"The library also contains some ",(0,c.kt)("a",{parentName:"p",href:"#utils"},"utils")," functions."),(0,c.kt)("admonition",{type:"tip"},(0,c.kt)("p",{parentName:"admonition"},"To quickly get started with integrating NEAR in a web browser, read our ",(0,c.kt)("a",{parentName:"p",href:"/develop/integrate/frontend"},"Web Frontend integration")," article.")),(0,c.kt)("admonition",{type:"info"},(0,c.kt)("p",{parentName:"admonition"},"Note the difference between ",(0,c.kt)("inlineCode",{parentName:"p"},"near-api-js")," and ",(0,c.kt)("inlineCode",{parentName:"p"},"near-sdk-js"),":"),(0,c.kt)("p",{parentName:"admonition"},"The JavaScript ",(0,c.kt)("em",{parentName:"p"},"SDK")," is a library for developing smart contracts. It contains classes and functions you use to write your smart contract code."),(0,c.kt)("p",{parentName:"admonition"},"The JavaScript ",(0,c.kt)("em",{parentName:"p"},"API")," is a complete library for all possible commands to interact with NEAR. It\u2019s a wrapper for the RPC endpoints, a library to interact with NEAR Wallet in the browser, and a tool for keys management.")),(0,c.kt)("hr",null),(0,c.kt)("h2",{id:"install"},"Install"),(0,c.kt)("p",null,"Include ",(0,c.kt)("inlineCode",{parentName:"p"},"near-api-js")," as a dependency in your package."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},"npm i --save near-api-js\n")),(0,c.kt)("h2",{id:"import"},"Import"),(0,c.kt)("p",null,"You can use the API library in the browser, or in Node.js runtime. Some features are available only in one of the environments.\nFor example, the ",(0,c.kt)("inlineCode",{parentName:"p"},"WalletConnection")," is only for the browser, and there are different ",(0,c.kt)("inlineCode",{parentName:"p"},"KeyStore")," providers for each environment."),(0,c.kt)(r.Z,{mdxType:"Tabs"},(0,c.kt)(l.Z,{value:"Browser",label:"Browser",default:!0,mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'import * as nearAPI from "near-api-js";\n'))),(0,c.kt)(l.Z,{value:"Node",label:"Node",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'const nearAPI = require("near-api-js");\n')))),(0,c.kt)("h2",{id:"key-store"},"Key Store"),(0,c.kt)("p",null,"If you sign transactions, you need to create a ",(0,c.kt)("em",{parentName:"p"},"Key Store"),". In the browser, the LocalStorage KeyStore will be used once you ask your user to Sign In with the Wallet."),(0,c.kt)(r.Z,{mdxType:"Tabs"},(0,c.kt)(l.Z,{value:"browser",label:"Using Browser",default:!0,mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},"// creates keyStore using private key in local storage\n\nconst { keyStores } = nearAPI;\nconst myKeyStore = new keyStores.BrowserLocalStorageKeyStore();\n")),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/key_stores_browser_local_storage_key_store.BrowserLocalStorageKeyStore"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-class"})," Class ",(0,c.kt)("inlineCode",{parentName:"a"},"BrowserLocalStorageKeyStore")))),(0,c.kt)(l.Z,{value:"dir",label:"Using Credentials Directory",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'// creates a keyStore that searches for keys in .near-credentials\n// requires credentials stored locally by using a NEAR-CLI command: `near login` \n// https://docs.near.org/tools/cli#near-login\n\nconst { keyStores } = nearAPI;\nconst homedir = require("os").homedir();\nconst CREDENTIALS_DIR = ".near-credentials";\nconst credentialsPath = require("path").join(homedir, CREDENTIALS_DIR);\nconst myKeyStore = new keyStores.UnencryptedFileSystemKeyStore(credentialsPath);\n')),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/key_stores_unencrypted_file_system_keystore.UnencryptedFileSystemKeyStore"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-class"})," Class ",(0,c.kt)("inlineCode",{parentName:"a"},"UnencryptedFileSystemKeyStore")))),(0,c.kt)(l.Z,{value:"file",label:"Using a File",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'// creates keyStore from a provided file\n// you will need to pass the location of the .json key pair\n\nconst { KeyPair, keyStores } = require("near-api-js");\nconst fs = require("fs");\nconst homedir = require("os").homedir();\n\nconst ACCOUNT_ID = "near-example.testnet";  // NEAR account tied to the keyPair\nconst NETWORK_ID = "testnet";\n// path to your custom keyPair location (ex. function access key for example account)\nconst KEY_PATH = \'/.near-credentials/near-example-testnet/get_token_price.json\';\n\nconst credentials = JSON.parse(fs.readFileSync(homedir + KEY_PATH));\nconst myKeyStore = new keyStores.InMemoryKeyStore();\nmyKeyStore.setKey(NETWORK_ID, ACCOUNT_ID, KeyPair.fromString(credentials.private_key));\n')),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/key_stores_in_memory_key_store.InMemoryKeyStore"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-class"})," Class ",(0,c.kt)("inlineCode",{parentName:"a"},"InMemoryKeyStore")),"\n","\xa0","\xa0","\xa0","\n",(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/utils_key_pair.KeyPair"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-class"})," Class ",(0,c.kt)("inlineCode",{parentName:"a"},"KeyPair")))),(0,c.kt)(l.Z,{value:"key",label:"Using a private key string",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'// creates keyStore from a private key string\n// you can define your key here or use an environment variable\n\nconst { keyStores, KeyPair } = nearAPI;\nconst myKeyStore = new keyStores.InMemoryKeyStore();\nconst PRIVATE_KEY =\n  "by8kdJoJHu7uUkKfoaLd2J2Dp1q1TigeWMG123pHdu9UREqPcshCM223kWadm";\n// creates a public / private key pair using the provided private key\nconst keyPair = KeyPair.fromString(PRIVATE_KEY);\n// adds the keyPair you created to keyStore\nawait myKeyStore.setKey("testnet", "example-account.testnet", keyPair);\n')),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/key_stores_in_memory_key_store.InMemoryKeyStore"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-class"})," Class ",(0,c.kt)("inlineCode",{parentName:"a"},"InMemoryKeyStore")),"\n","\xa0","\xa0","\xa0","\n",(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/utils_key_pair.KeyPair"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-class"})," Class ",(0,c.kt)("inlineCode",{parentName:"a"},"KeyPair"))))),(0,c.kt)("h2",{id:"connect"},"Connecting to NEAR"),(0,c.kt)("p",null,"The object returned from ",(0,c.kt)("inlineCode",{parentName:"p"},"connect")," is your entry-point for all commands in the API.\nTo sign a transaction you'll need a ",(0,c.kt)("a",{parentName:"p",href:"#key-store"},(0,c.kt)("inlineCode",{parentName:"a"},"KeyStore"))," to create a connection."),(0,c.kt)(r.Z,{mdxType:"Tabs"},(0,c.kt)(l.Z,{value:"testnet",label:"TestNet",default:!0,mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'const { connect } = nearAPI;\n\nconst connectionConfig = {\n  networkId: "testnet",\n  keyStore: myKeyStore, // first create a key store \n  nodeUrl: "https://rpc.testnet.near.org",\n  walletUrl: "https://wallet.testnet.near.org",\n  helperUrl: "https://helper.testnet.near.org",\n  explorerUrl: "https://explorer.testnet.near.org",\n};\nconst nearConnection = await connect(connectionConfig);\n'))),(0,c.kt)(l.Z,{value:"mainnet",label:"MainNet",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'const { connect } = nearAPI;\n\nconst connectionConfig = {\n  networkId: "mainnet",\n  keyStore: myKeyStore, // first create a key store\n  nodeUrl: "https://rpc.mainnet.near.org",\n  walletUrl: "https://wallet.mainnet.near.org",\n  helperUrl: "https://helper.mainnet.near.org",\n  explorerUrl: "https://explorer.mainnet.near.org",\n};\nconst nearConnection = await connect(connectionConfig);\n'))),(0,c.kt)(l.Z,{value:"betanet",label:"BetaNet",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'const { connect } = nearAPI;\n\nconst connectionConfig = {\n  networkId: "betanet",\n  keyStore: myKeyStore, // first create a key store\n  nodeUrl: "https://rpc.betanet.near.org",\n  walletUrl: "https://wallet.betanet.near.org",\n  helperUrl: "https://helper.betanet.near.org",\n  explorerUrl: "https://explorer.betanet.near.org",\n};\nconst nearConnection = await connect(connectionConfig);\n'))),(0,c.kt)(l.Z,{value:"localnet",label:"LocalNet",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'const { connect } = nearAPI;\nconst connectionConfig = {\n  networkId: "local",\n  nodeUrl: "http://localhost:3030",\n  walletUrl: "http://localhost:4000/wallet",\n};\nconst nearConnection = await connect(connectionConfig);\n')))),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/modules/connect"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-module"})," Module ",(0,c.kt)("inlineCode",{parentName:"a"},"connect"))),(0,c.kt)("h2",{id:"wallet"},"Interacting with the Wallet"),(0,c.kt)("p",null,"Wallet interaction is possible only in the browser, because NEAR's Wallet is web-based."),(0,c.kt)("h3",{id:"wallet-connection"},"Creating Wallet Connection"),(0,c.kt)("p",null,"In Wallet connection you use a LocalStorage ",(0,c.kt)("a",{parentName:"p",href:"#key-store"},(0,c.kt)("inlineCode",{parentName:"a"},"KeyStore")),"."),(0,c.kt)(r.Z,{mdxType:"Tabs"},(0,c.kt)(l.Z,{value:"testnet",label:"TestNet",default:!0,mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'const { connect, keyStores, WalletConnection } = nearAPI;\n\nconst connectionConfig = {\n  networkId: "testnet",\n  keyStore: new keyStores.BrowserLocalStorageKeyStore(),\n  nodeUrl: "https://rpc.testnet.near.org",\n  walletUrl: "https://wallet.testnet.near.org",\n  helperUrl: "https://helper.testnet.near.org",\n  explorerUrl: "https://explorer.testnet.near.org",\n};\n\n// connect to NEAR\nconst nearConnection = await connect(connectionConfig);\n\n// create wallet connection\nconst walletConnection = new WalletConnection(nearConnection);\n'))),(0,c.kt)(l.Z,{value:"mainnet",label:"MainNet",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'const { connect, keyStores, WalletConnection } = nearAPI;\n\nconst connectionConfig = {\n  networkId: "mainnet",\n  keyStore: new keyStores.BrowserLocalStorageKeyStore(),\n  nodeUrl: "https://rpc.mainnet.near.org",\n  walletUrl: "https://wallet.mainnet.near.org",\n  helperUrl: "https://helper.mainnet.near.org",\n  explorerUrl: "https://explorer.mainnet.near.org",\n};\n\n// connect to NEAR\nconst nearConnection = await connect(connectionConfig);\n\n// create wallet connection\nconst walletConnection = new WalletConnection(nearConnection);\n'))),(0,c.kt)(l.Z,{value:"betanet",label:"BetaNet",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'const { connect, keyStores, WalletConnection } = nearAPI;\n\nconst connectionConfig = {\n  networkId: "betanet",\n  keyStore: new keyStores.BrowserLocalStorageKeyStore(),\n  nodeUrl: "https://rpc.betanet.near.org",\n  walletUrl: "https://wallet.betanet.near.org",\n  helperUrl: "https://helper.betanet.near.org",\n  explorerUrl: "https://explorer.betanet.near.org",\n};\n\n// connect to NEAR\nconst nearConnection = await connect(connectionConfig);\n\n// create wallet connection\nconst walletConnection = new WalletConnection(nearConnection);\n')))),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/modules/browserConnect"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-module"})," Module ",(0,c.kt)("inlineCode",{parentName:"a"},"browserConnect")),"\n","\xa0","\xa0","\xa0","\n",(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/walletAccount.WalletConnection"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-class"})," Class ",(0,c.kt)("inlineCode",{parentName:"a"},"WalletConnection"))),(0,c.kt)("h3",{id:"sign-in"},"Ask your user to Sign In"),(0,c.kt)("p",null,"You first create a ",(0,c.kt)("a",{parentName:"p",href:"#wallet-connection"},"WalletConnection"),", and then call ",(0,c.kt)("inlineCode",{parentName:"p"},"requestSignIn"),".\nThis will redirect the current page to the Wallet authentication page.\nYou can configure success and failure redirect URLs."),(0,c.kt)("p",null,"This action creates an access key that will be stored in the browser's local storage.\nThe access key can then be used to connect to NEAR and sign transactions via the KeyStore."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'// const walletConnection = new WalletConnection(nearConnection);\nwalletConnection.requestSignIn(\n  "example-contract.testnet", // contract requesting access\n  "Example App", // optional title\n  "http://YOUR-URL.com/success", // optional redirect URL on success\n  "http://YOUR-URL.com/failure" // optional redirect URL on failure\n);\n')),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/walletAccount.WalletConnection#requestsignin"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-method"})," Method ",(0,c.kt)("inlineCode",{parentName:"a"},"WalletConnection.requestSignIn"))),(0,c.kt)("admonition",{type:"tip"},(0,c.kt)("p",{parentName:"admonition"},"Sign In is ",(0,c.kt)("strong",{parentName:"p"},(0,c.kt)("em",{parentName:"strong"},"not required"))," if you are using an alternative key store to local storage, or you are not signing transactions (meaning - you are only calling read-only ",(0,c.kt)("em",{parentName:"p"},"view")," methods on a contract)")),(0,c.kt)("h3",{id:"sign-out"},"Sign Out on behalf of your user"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},"// const walletConnection = new WalletConnection(nearConnection);\nwalletConnection.signOut();\n")),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/walletAccount.WalletConnection#signout"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-method"})," Method ",(0,c.kt)("inlineCode",{parentName:"a"},"WalletConnection.signOut"))),(0,c.kt)("h3",{id:"check-if-signed-in"},"Check if Signed In"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},"// const walletConnection = new WalletConnection(nearConnection);\nif (walletConnection.isSignedIn()) {\n    // user is signed in\n}\n")),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/walletAccount.WalletConnection#issignedin"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-method"})," Method ",(0,c.kt)("inlineCode",{parentName:"a"},"WalletConnection.isSignedId"))),(0,c.kt)("h3",{id:"get-authorized-account-id"},"Get Authorized Account Id"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},"// const walletConnection = new WalletConnection(nearConnection);\nconst walletAccountId = walletConnection.getAccountId();\n")),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/walletAccount.WalletConnection#getaccountid"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-method"})," Method ",(0,c.kt)("inlineCode",{parentName:"a"},"WalletConnection.getAccountId"))),(0,c.kt)("h3",{id:"get-authorized-account-object"},"Get Authorized Account Object"),(0,c.kt)("p",null,"This will return an instance of ",(0,c.kt)("a",{parentName:"p",href:"#account"},"Account")," that this wallet is authorized for. "),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},"// const walletConnection = new WalletConnection(nearConnection);\nconst walletAccountObj = walletConnection.account();\n")),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/walletAccount.WalletConnection#account"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-method"})," Method ",(0,c.kt)("inlineCode",{parentName:"a"},"WalletConnection.account")),"\n","\xa0","\xa0","\xa0","\n",(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/walletAccount.ConnectedWalletAccount"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-class"})," Class ",(0,c.kt)("inlineCode",{parentName:"a"},"ConnectedWalletAccount"))),(0,c.kt)("h2",{id:"account"},"Account"),(0,c.kt)("p",null,"You can create, delete and interact with accounts with the Account module."),(0,c.kt)("h3",{id:"load-account"},"Load Account"),(0,c.kt)("p",null,"This will return an Account object for you to interact with."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'const account = await nearConnection.account("example-account.testnet");\n')),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/account.Account"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-class"})," Class ",(0,c.kt)("inlineCode",{parentName:"a"},"Account"))),(0,c.kt)("h3",{id:"create-account"},"Create Account"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'// create a new account using funds from the account used to create it.\nconst account = await nearConnection.account("example-account.testnet");\nawait account.createAccount(\n  "example-account2.testnet", // new account name\n  "8hSHprDq2StXwMtNd43wDTXQYsjXcD4MJTXQYsjXcc", // public key for new account\n  "10000000000000000000" // initial balance for new account in yoctoNEAR\n);\n')),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/account.Account#createaccount"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-method"})," Method ",(0,c.kt)("inlineCode",{parentName:"a"},"Account.createAccount"))),(0,c.kt)("h3",{id:"delete-account"},"Delete Account"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'// deletes account found in the `account` object\n// transfers remaining account balance to the accountId passed as an argument\nconst account = await nearConnection.account("example-account.testnet");\nawait account.deleteAccount("beneficiary-account.testnet");\n')),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/account.Account#deleteaccount"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-method"})," Method ",(0,c.kt)("inlineCode",{parentName:"a"},"Account.deleteAccount"))),(0,c.kt)("h3",{id:"get-account-balance"},"Get Account Balance"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'// gets account balance\nconst account = await nearConnection.account("example-account.testnet");\nawait account.getAccountBalance();\n')),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/account.Account#getaccountbalance"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-method"})," Method ",(0,c.kt)("inlineCode",{parentName:"a"},"Account.getAccountBalance"))),(0,c.kt)("h3",{id:"get-account-details"},"Get Account details"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'// gets account details in terms of authorized apps and transactions\nconst account = await nearConnection.account("example-account.testnet");\nawait account.getAccountDetails();\n')),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/account.Account#getaccountdetails"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-method"})," Method ",(0,c.kt)("inlineCode",{parentName:"a"},"Account.getAccountDetails"))),(0,c.kt)("h3",{id:"deploy-a-contract"},"Deploy a Contract"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},"const account = await nearConnection.account(\"example-account.testnet\");\nconst response = await account.deployContract(fs.readFileSync('./wasm_files/status_message.wasm'));\nconsole.log(response);\n")),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/account.Account#deploycontract"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-method"})," Method ",(0,c.kt)("inlineCode",{parentName:"a"},"Account.deployContract"))),(0,c.kt)("h3",{id:"send-tokens"},"Send Tokens"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'// sends NEAR tokens\nconst account = await nearConnection.account("sender-account.testnet");\nawait account.sendMoney(\n  "receiver-account.testnet", // receiver account\n  "1000000000000000000000000" // amount in yoctoNEAR\n);\n')),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/account.Account#sendmoney"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-method"})," Method ",(0,c.kt)("inlineCode",{parentName:"a"},"Account.sendMoney"))),(0,c.kt)("h3",{id:"state"},"State"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'// gets the state of the account\nconst account = await nearConnection.account("example-account.testnet");\nconst response = await account.state();\nconsole.log(response);\n')),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/account.Account#state"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-method"})," Method ",(0,c.kt)("inlineCode",{parentName:"a"},"Account.state"))),(0,c.kt)("h3",{id:"access-keys"},"Access Keys"),(0,c.kt)("h4",{id:"add-full-access-key"},"Add Full Access Key"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'// takes public key as string for argument\nconst account = await nearConnection.account("example-account.testnet");\nawait account.addKey("8hSHprDq2StXwMtNd43wDTXQYsjXcD4MJTXQYsjXcc");\n')),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/account.Account#addkey"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-method"})," Method ",(0,c.kt)("inlineCode",{parentName:"a"},"Account.addKey"))),(0,c.kt)("h4",{id:"add-function-access-key"},"Add Function Access Key"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'// adds function access key\nconst account = await nearConnection.account("example-account.testnet");\nawait account.addKey(\n  "8hSHprDq2StXwMtNd43wDTXQYsjXcD4MJTXQYsjXcc", // public key for new account\n  "example-account.testnet", // contract this key is allowed to call (optional)\n  "example_method", // methods this key is allowed to call (optional)\n  "2500000000000" // allowance key can use to call methods (optional)\n);\n')),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/account.Account#addkey"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-method"})," Method ",(0,c.kt)("inlineCode",{parentName:"a"},"Account.addKey"))),(0,c.kt)("h4",{id:"get-all-access-keys"},"Get All Access Keys"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'// returns all access keys associated with an account\nconst account = await nearConnection.account("example-account.testnet");\nawait account.getAccessKeys();\n')),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/account.Account#getaccesskeys"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-method"})," Method ",(0,c.kt)("inlineCode",{parentName:"a"},"Account.getAccessKeys"))),(0,c.kt)("h4",{id:"delete-access-key"},"Delete Access Key"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'// takes public key as string for argument\nconst account = await nearConnection.account("example-account.testnet");\nawait account.deleteKey("8hSHprDq2StXwMtNd43wDTXQYsjXcD4MJTXQYsjXcc");\n')),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/account.Account#deletekey"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-method"})," Method ",(0,c.kt)("inlineCode",{parentName:"a"},"Account.deleteKey"))),(0,c.kt)("h2",{id:"contract"},"Contract"),(0,c.kt)("p",null,"When you instantiate an instance of ",(0,c.kt)("inlineCode",{parentName:"p"},"Contract"),", it includes the smart-contract functions as methods of the instance.\nFor example if you deployed a contract with ",(0,c.kt)("inlineCode",{parentName:"p"},"my_method")," function on it, then this will work:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'const contract = new Contract(account, {\n  changeMethods: ["my_method"],\n});\n// `contract` object has `my_method` on it: \ncontract.my_method()\n')),(0,c.kt)("h3",{id:"load-contract"},"Load Contract"),(0,c.kt)(r.Z,{mdxType:"Tabs"},(0,c.kt)(l.Z,{value:"Standard",label:"Standard",default:!0,mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'const { Contract } = nearAPI;\n\nconst contract = new Contract(\n  account, // the account object that is connecting\n  "example-contract.testnet",\n  {\n    // name of contract you\'re connecting to\n    viewMethods: ["getMessages"], // view methods do not change state but usually return a value\n    changeMethods: ["addMessage"], // change methods modify state\n  }\n);\n')),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/contract.Contract"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-class"})," Class ",(0,c.kt)("inlineCode",{parentName:"a"},"Contract")))),(0,c.kt)(l.Z,{value:"wallet",label:"Using Wallet",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'const { Contract } = nearAPI;\n\nconst contract = new Contract(\n  wallet.account(), // the account object that is connecting\n  "example-contract.testnet",\n  {\n    // name of contract you\'re connecting to\n    viewMethods: ["getMessages"], // view methods do not change state but usually return a value\n    changeMethods: ["addMessage"], // change methods modify state\n  }\n);\n')),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/contract.Contract"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-class"})," Class ",(0,c.kt)("inlineCode",{parentName:"a"},"Contract"))))),(0,c.kt)("h3",{id:"call-contract"},"Call Contract"),(0,c.kt)(r.Z,{mdxType:"Tabs"},(0,c.kt)(l.Z,{value:"method",label:"Change Method",default:!0,mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'await contract.method_name(\n  {\n    arg_name: "value", // argument name and value - pass empty object if no args required\n  },\n  "300000000000000", // attached GAS (optional)\n  "1000000000000000000000000" // attached deposit in yoctoNEAR (optional)\n);\n'))),(0,c.kt)(l.Z,{value:"callback",label:"Change Method w/ callbackUrl and meta",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},"await contract.method_name(\n  {\n    callbackUrl: 'https://example.com/callback', // callbackUrl after the transaction approved (optional)\n    meta: 'some info', // meta information NEAR Wallet will send back to the application. `meta` will be attached to the `callbackUrl` as a url search param\n    args: {\n        arg_name: \"value\" // argument name and value - pass empty object if no args required\n    },\n    gas: 300000000000000, // attached GAS (optional)\n    amount: 1000000000000000000000000 // attached deposit in yoctoNEAR (optional)\n  }\n);\n"))),(0,c.kt)(l.Z,{value:"view",label:"View Method",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},"const response = await contract.view_method_name();\nconsole.log(response);\n"))),(0,c.kt)(l.Z,{value:"args",label:"View Method w/ args",mdxType:"TabItem"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'const response = await contract.view_method_name({ arg_name: "arg_value" });\nconsole.log(response);\n')))),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/contract.Contract"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-class"})," Class ",(0,c.kt)("inlineCode",{parentName:"a"},"Contract"))),(0,c.kt)("h2",{id:"utils"},"Utils"),(0,c.kt)("h3",{id:"near--yoctonear"},"NEAR => yoctoNEAR"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'// converts NEAR amount into yoctoNEAR (10^-24)\n\nconst { utils } = nearAPI;\nconst amountInYocto = utils.format.parseNearAmount("1");\n')),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/modules/utils_format#parsenearamount"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-function"})," Function ",(0,c.kt)("inlineCode",{parentName:"a"},"parseNearAmount"))),(0,c.kt)("h3",{id:"yoctonear--near"},"YoctoNEAR => NEAR"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js"},'// converts yoctoNEAR (10^-24) amount into NEAR\n\nconst { utils } = nearAPI;\nconst amountInNEAR = utils.format.formatNearAmount("1000000000000000000000000");\n')),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/modules/utils_format#formatnearamount"},(0,c.kt)("span",{class:"typedoc-icon typedoc-icon-function"})," Function ",(0,c.kt)("inlineCode",{parentName:"a"},"formatNearAmount"))))}h.isMDXComponent=!0}}]);