"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1921],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>k});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),u=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(i.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(t),k=a,m=p["".concat(i,".").concat(k)]||p[k]||d[k]||l;return t?r.createElement(m,o(o({ref:n},c),{},{components:t})):r.createElement(m,o({ref:n},c))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=p;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<l;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.d(n,{Z:()=>o});var r=t(67294),a=t(86010);const l="tabItem_Ymn6";function o(e){var n=e.children,t=e.hidden,o=e.className;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(l,o),hidden:t},n)}},65488:(e,n,t)=>{t.d(n,{Z:()=>k});var r=t(87462),a=t(67294),l=t(86010),o=t(72389),s=t(67392),i=t(7094),u=t(12466);const c="tabList__CuJ",d="tabItem_LNqP";function p(e){var n,t,o=e.lazy,p=e.block,k=e.defaultValue,m=e.values,h=e.groupId,g=e.className,b=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=m?m:b.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),N=(0,s.l)(f,(function(e,n){return e.value===n.value}));if(N.length>0)throw new Error('Docusaurus error: Duplicate values "'+N.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var A=null===k?k:null!=(n=null!=k?k:null==(t=b.find((function(e){return e.props.default})))?void 0:t.props.value)?n:b[0].props.value;if(null!==A&&!f.some((function(e){return e.value===A})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+A+'" but none of its children has the corresponding value. Available values are: '+f.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var R=(0,i.U)(),v=R.tabGroupChoices,y=R.setTabGroupChoices,w=(0,a.useState)(A),E=w[0],_=w[1],T=[],C=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var S=v[h];null!=S&&S!==E&&f.some((function(e){return e.value===S}))&&_(S)}var x=function(e){var n=e.currentTarget,t=T.indexOf(n),r=f[t].value;r!==E&&(C(n),_(r),null!=h&&y(h,String(r)))},q=function(e){var n,t=null;switch(e.key){case"ArrowRight":var r,a=T.indexOf(e.currentTarget)+1;t=null!=(r=T[a])?r:T[0];break;case"ArrowLeft":var l,o=T.indexOf(e.currentTarget)-1;t=null!=(l=T[o])?l:T[T.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:(0,l.Z)("tabs-container",c)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":p},g)},f.map((function(e){var n=e.value,t=e.label,o=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:E===n?0:-1,"aria-selected":E===n,key:n,ref:function(e){return T.push(e)},onKeyDown:q,onFocus:x,onClick:x},o,{className:(0,l.Z)("tabs__item",d,null==o?void 0:o.className,{"tabs__item--active":E===n})}),null!=t?t:n)}))),o?(0,a.cloneElement)(b.filter((function(e){return e.props.value===E}))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},b.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==E})}))))}function k(e){var n=(0,o.Z)();return a.createElement(p,(0,r.Z)({key:String(n)},e))}},12565:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>h,frontMatter:()=>u,metadata:()=>d,toc:()=>k});var r=t(87462),a=t(63366),l=(t(67294),t(3905)),o=t(65488),s=t(85162),i=["components"],u={id:"transactions",title:"RPC Endpoints",sidebar_label:"Transactions"},c=void 0,d={unversionedId:"api/rpc/transactions",id:"api/rpc/transactions",title:"RPC Endpoints",description:"",source:"@site/../docs/5.api/rpc/transactions.md",sourceDirName:"5.api/rpc",slug:"/api/rpc/transactions",permalink:"/near-docs-kor/api/rpc/transactions",draft:!1,editUrl:"https://github.com/near/docs/edit/master/website/../docs/5.api/rpc/transactions.md",tags:[],version:"current",lastUpdatedBy:"[sm-stack]",lastUpdatedAt:1675844989,formattedLastUpdatedAt:"Feb 8, 2023",frontMatter:{id:"transactions",title:"RPC Endpoints",sidebar_label:"Transactions"},sidebar:"api",previous:{title:"Network",permalink:"/near-docs-kor/api/rpc/network"}},p={},k=[{value:"Send transaction (async)",id:"send-transaction-async",level:2},{value:"What could go wrong?",id:"what-could-go-wrong",level:4},{value:"Send transaction (await)",id:"send-transaction-await",level:2},{value:"What could go wrong?",id:"what-could-go-wrong-1",level:4},{value:"Transaction Status",id:"transaction-status",level:2},{value:"What could go wrong?",id:"what-could-go-wrong-2",level:4},{value:"Transaction Status with Receipts",id:"transaction-status-with-receipts",level:2},{value:"What could go wrong?",id:"what-could-go-wrong-3",level:4},{value:"Receipt by ID",id:"receipt-by-id",level:3},{value:"What could go wrong?",id:"what-could-go-wrong-4",level:4}],m={toc:k};function h(e){var n=e.components,u=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},m,u,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The RPC API enables you to send transactions and query their status."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"send-transaction-async"},"Send transaction (async)"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Sends a transaction and immediately returns transaction hash.")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"method: ",(0,l.kt)("inlineCode",{parentName:"li"},"broadcast_tx_async")),(0,l.kt)("li",{parentName:"ul"},"params: ","[SignedTransaction encoded in base64]")),(0,l.kt)("p",null,"Example:"),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"json",label:"JSON",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "id": "dontcare",\n  "method": "broadcast_tx_async",\n  "params": [\n    "DgAAAHNlbmRlci50ZXN0bmV0AOrmAai64SZOv9e/naX4W15pJx0GAap35wTT1T/DwcbbDwAAAAAAAAAQAAAAcmVjZWl2ZXIudGVzdG5ldNMnL7URB1cxPOu3G8jTqlEwlcasagIbKlAJlF5ywVFLAQAAAAMAAACh7czOG8LTAAAAAAAAAGQcOG03xVSFQFjoagOb4NBBqWhERnnz45LY4+52JgZhm1iQKz7qAdPByrGFDQhQ2Mfga8RlbysuQ8D8LlA6bQE="\n  ]\n}\n'))),(0,l.kt)(s.Z,{value:"http",label:"HTTPie",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"http post https://rpc.testnet.near.org jsonrpc=2.0 id=dontcare method=broadcast_tx_async \\\n    params:='[\n        \"DgAAAHNlbmRlci50ZXN0bmV0AOrmAai64SZOv9e/naX4W15pJx0GAap35wTT1T/DwcbbDwAAAAAAAAAQAAAAcmVjZWl2ZXIudGVzdG5ldNMnL7URB1cxPOu3G8jTqlEwlcasagIbKlAJlF5ywVFLAQAAAAMAAACh7czOG8LTAAAAAAAAAGQcOG03xVSFQFjoagOb4NBBqWhERnnz45LY4+52JgZhm1iQKz7qAdPByrGFDQhQ2Mfga8RlbysuQ8D8LlA6bQE=\"\n    ]'\n")))),(0,l.kt)("p",null,"Example response:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "result": "6zgh2u9DqHHiXzdy9ouTP7oGky2T4nugqzqt9wJZwNFm",\n  "id": "dontcare"\n}\n')),(0,l.kt)("p",null,"Final transaction results can be queried using ",(0,l.kt)("a",{parentName:"p",href:"#transaction-status"},"Transaction Status"),"\nor ",(0,l.kt)("a",{parentName:"p",href:"https://explorer.testnet.near.org/"},"NEAR Explorer")," using the above ",(0,l.kt)("inlineCode",{parentName:"p"},"result")," hash returning a result similar to the example below."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"NEAR-Explorer-transactionHash",src:t(23761).Z,width:"1529",height:"720"})),(0,l.kt)("h4",{id:"what-could-go-wrong"},"What could go wrong?"),(0,l.kt)("p",null,"When API request fails, RPC server returns a structured error response with a limited number of well-defined error variants, so client code can exhaustively handle all the possible error cases. Our JSON-RPC errors follow ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/joyent/node-verror"},"verror")," convention for structuring the error response:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "error": {\n        "name": <ERROR_TYPE>,\n        "cause": {\n            "info": {..},\n            "name": <ERROR_CAUSE>\n        },\n        "code": -32000,\n        "data": String,\n        "message": "Server error",\n    },\n    "id": "dontcare",\n    "jsonrpc": "2.0"\n}\n')),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Heads up")),(0,l.kt)("p",{parentName:"blockquote"},"The fields ",(0,l.kt)("inlineCode",{parentName:"p"},"code"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"data"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"message")," in the structure above are considered legacy ones and might be deprecated in the future. Please, don't rely on them.")),(0,l.kt)("p",null,"Here is the exhaustive list of the error variants that can be returned by ",(0,l.kt)("inlineCode",{parentName:"p"},"broadcast_tx_async")," method:"),(0,l.kt)("table",{class:"custom-stripe"},(0,l.kt)("thead",null,(0,l.kt)("tr",null,(0,l.kt)("th",null,"ERROR_TYPE",(0,l.kt)("br",null),(0,l.kt)("code",null,"error.name")),(0,l.kt)("th",null,"ERROR_CAUSE",(0,l.kt)("br",null),(0,l.kt)("code",null,"error.cause.name")),(0,l.kt)("th",null,"Reason"),(0,l.kt)("th",null,"Solution"))),(0,l.kt)("tbody",null,(0,l.kt)("tr",{class:"stripe"},(0,l.kt)("td",null,"REQUEST_VALIDATION_ERROR"),(0,l.kt)("td",null,"PARSE_ERROR"),(0,l.kt)("td",null,"Passed arguments can't be parsed by JSON RPC server (missing arguments, wrong format, etc.)"),(0,l.kt)("td",null,(0,l.kt)("ul",null,(0,l.kt)("li",null,"Check the arguments passed and pass the correct ones"),(0,l.kt)("li",null,"Check ",(0,l.kt)("code",null,"error.cause.info")," for more details")))))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"send-transaction-await"},"Send transaction (await)"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Sends a transaction and waits until transaction is fully complete. ",(0,l.kt)("em",{parentName:"p"},"(Has a 10 second timeout)"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"method: ",(0,l.kt)("inlineCode",{parentName:"li"},"broadcast_tx_commit")),(0,l.kt)("li",{parentName:"ul"},"params: ",(0,l.kt)("inlineCode",{parentName:"li"},"[SignedTransaction encoded in base64]"))),(0,l.kt)("p",null,"Example:"),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"json",label:"JSON",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "id": "dontcare",\n  "method": "broadcast_tx_commit",\n  "params": [\n    "DgAAAHNlbmRlci50ZXN0bmV0AOrmAai64SZOv9e/naX4W15pJx0GAap35wTT1T/DwcbbDQAAAAAAAAAQAAAAcmVjZWl2ZXIudGVzdG5ldIODI4YfV/QS++blXpQYT+bOsRblTRW4f547y/LkvMQ9AQAAAAMAAACh7czOG8LTAAAAAAAAAAXcaTJzu9GviPT7AD4mNJGY79jxTrjFLoyPBiLGHgBi8JK1AnhK8QknJ1ourxlvOYJA2xEZE8UR24THmSJcLQw="\n  ]\n}\n'))),(0,l.kt)(s.Z,{value:"http",label:"HTTPie",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"http post https://rpc.testnet.near.org jsonrpc=2.0 id=dontcare method=broadcast_tx_commit \\\n    params:='[\n        \"DwAAAG5lYXJrYXQudGVzdG5ldABuTi5L1rwnlb35hc9tn5WELkxfiGfGh1Q5aeGNQDejo0QAAAAAAAAAEAAAAGpvc2hmb3JkLnRlc3RuZXSiWAc6W9KlqXS5fK+vjFRDV5pAxHRKU0srKX/cmdRTBgEAAAADAAAAoe3MzhvC0wAAAAAAAAB9rOE9zc5zQYLL1j6VTh3I4fQbERs6I07gJfrAC6jo8DB4HolR9Xps3v4qrZxkgZjwv6wB0QOROM4UEbeOaBoB\"\n    ]'\n")))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Example response: "),(0,l.kt)("p",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "result": {\n    "status": {\n      "SuccessValue": ""\n    },\n    "transaction": {\n      "signer_id": "sender.testnet",\n      "public_key": "ed25519:Gowpa4kXNyTMRKgt5W7147pmcc2PxiFic8UHW9rsNvJ6",\n      "nonce": 13,\n      "receiver_id": "receiver.testnet",\n      "actions": [\n        {\n          "Transfer": {\n            "deposit": "1000000000000000000000000"\n          }\n        }\n      ],\n      "signature": "ed25519:7oCBMfSHrZkT7tzPDBxxCd3tWFhTES38eks3MCZMpYPJRfPWKxJsvmwQiVBBxRLoxPTnXVaMU2jPV3MdFKZTobH",\n      "hash": "ASS7oYwGiem9HaNwJe6vS2kznx2CxueKDvU9BAYJRjNR"\n    },\n    "transaction_outcome": {\n      "proof": [],\n      "block_hash": "9MzuZrRPW1BGpFnZJUJg6SzCrixPpJDfjsNeUobRXsLe",\n      "id": "ASS7oYwGiem9HaNwJe6vS2kznx2CxueKDvU9BAYJRjNR",\n      "outcome": {\n        "logs": [],\n        "receipt_ids": ["BLV2q6p8DX7pVgXRtGtBkyUNrnqkNyU7iSksXG7BjVZh"],\n        "gas_burnt": 223182562500,\n        "tokens_burnt": "22318256250000000000",\n        "executor_id": "sender.testnet",\n        "status": {\n          "SuccessReceiptId": "BLV2q6p8DX7pVgXRtGtBkyUNrnqkNyU7iSksXG7BjVZh"\n        }\n      }\n    },\n    "receipts_outcome": [\n      {\n        "proof": [],\n        "block_hash": "5Hpj1PeCi32ZkNXgiD1DrW4wvW4Xtic74DJKfyJ9XL3a",\n        "id": "BLV2q6p8DX7pVgXRtGtBkyUNrnqkNyU7iSksXG7BjVZh",\n        "outcome": {\n          "logs": [],\n          "receipt_ids": ["3sawynPNP8UkeCviGqJGwiwEacfPyxDKRxsEWPpaUqtR"],\n          "gas_burnt": 223182562500,\n          "tokens_burnt": "22318256250000000000",\n          "executor_id": "receiver.testnet",\n          "status": {\n            "SuccessValue": ""\n          }\n        }\n      },\n      {\n        "proof": [],\n        "block_hash": "CbwEqMpPcu6KwqVpBM3Ry83k6M4H1FrJjES9kBXThcRd",\n        "id": "3sawynPNP8UkeCviGqJGwiwEacfPyxDKRxsEWPpaUqtR",\n        "outcome": {\n          "logs": [],\n          "receipt_ids": [],\n          "gas_burnt": 0,\n          "tokens_burnt": "0",\n          "executor_id": "sender.testnet",\n          "status": {\n            "SuccessValue": ""\n          }\n        }\n      }\n    ]\n  },\n  "id": "dontcare"\n}\n')))),(0,l.kt)("h4",{id:"what-could-go-wrong-1"},"What could go wrong?"),(0,l.kt)("p",null,"When API request fails, RPC server returns a structured error response with a limited number of well-defined error variants, so client code can exhaustively handle all the possible error cases. Our JSON-RPC errors follow ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/joyent/node-verror"},"verror")," convention for structuring the error response:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "error": {\n        "name": <ERROR_TYPE>,\n        "cause": {\n            "info": {..},\n            "name": <ERROR_CAUSE>\n        },\n        "code": -32000,\n        "data": String,\n        "message": "Server error",\n    },\n    "id": "dontcare",\n    "jsonrpc": "2.0"\n}\n')),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Heads up")),(0,l.kt)("p",{parentName:"blockquote"},"The fields ",(0,l.kt)("inlineCode",{parentName:"p"},"code"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"data"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"message")," in the structure above are considered legacy ones and might be deprecated in the future. Please, don't rely on them.")),(0,l.kt)("p",null,"Here is the exhaustive list of the error variants that can be returned by ",(0,l.kt)("inlineCode",{parentName:"p"},"broadcast_tx_commit")," method:"),(0,l.kt)("table",{class:"custom-stripe"},(0,l.kt)("thead",null,(0,l.kt)("tr",null,(0,l.kt)("th",null,"ERROR_TYPE",(0,l.kt)("br",null),(0,l.kt)("code",null,"error.name")),(0,l.kt)("th",null,"ERROR_CAUSE",(0,l.kt)("br",null),(0,l.kt)("code",null,"error.cause.name")),(0,l.kt)("th",null,"Reason"),(0,l.kt)("th",null,"Solution"))),(0,l.kt)("tbody",null,(0,l.kt)("tr",null,(0,l.kt)("td",{rowspan:"2"},"HANDLER_ERROR"),(0,l.kt)("td",null,"INVALID_TRANSACTION"),(0,l.kt)("td",null,"An error happened during transaction execution"),(0,l.kt)("td",null,(0,l.kt)("ul",null,(0,l.kt)("li",null,"See ",(0,l.kt)("code",null,"error.cause.info")," for details")))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"TIMEOUT_ERROR"),(0,l.kt)("td",null,"Transaction was routed, but has not been recorded on chain in 10 seconds."),(0,l.kt)("td",null,(0,l.kt)("ul",null,(0,l.kt)("li",null," Re-submit the request with the identical transaction (in NEAR Protocol unique transactions apply exactly once, so if the previously sent transaction gets applied, this request will just return the known result, otherwise, it will route the transaction to the chain once again)"),(0,l.kt)("li",null,"Check that your transaction is valid"),(0,l.kt)("li",null,"Check that the signer account id has enough tokens to cover the transaction fees (keep in mind that some tokens on each account are locked to cover the storage cost)")))),(0,l.kt)("tr",{class:"stripe"},(0,l.kt)("td",null,"REQUEST_VALIDATION_ERROR"),(0,l.kt)("td",null,"PARSE_ERROR"),(0,l.kt)("td",null,"Passed arguments can't be parsed by JSON RPC server (missing arguments, wrong format, etc.)"),(0,l.kt)("td",null,(0,l.kt)("ul",null,(0,l.kt)("li",null,"Check the arguments passed and pass the correct ones"),(0,l.kt)("li",null,"Check ",(0,l.kt)("code",null,"error.cause.info")," for more details")))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"INTERNAL_ERROR"),(0,l.kt)("td",null,"INTERNAL_ERROR"),(0,l.kt)("td",null,"Something went wrong with the node itself or overloaded"),(0,l.kt)("td",null,(0,l.kt)("ul",null,(0,l.kt)("li",null,"Try again later"),(0,l.kt)("li",null,"Send a request to a different node"),(0,l.kt)("li",null,"Check ",(0,l.kt)("code",null,"error.cause.info")," for more details")))))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"transaction-status"},"Transaction Status"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Queries status of a transaction by hash and returns the final transaction result.")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"method: ",(0,l.kt)("inlineCode",{parentName:"li"},"tx")),(0,l.kt)("li",{parentName:"ul"},"params:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"transaction hash")," ",(0,l.kt)("em",{parentName:"li"},"(see ",(0,l.kt)("a",{parentName:"em",href:"https://explorer.testnet.near.org"},"NEAR Explorer")," for a valid transaction hash)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"sender account id"))))),(0,l.kt)("p",null,"Example:"),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"json",label:"JSON",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "id": "dontcare",\n  "method": "tx",\n  "params": ["6zgh2u9DqHHiXzdy9ouTP7oGky2T4nugqzqt9wJZwNFm", "sender.testnet"]\n}\n'))),(0,l.kt)(s.Z,{value:"\ud83c\udf10 JavaScript",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'const response = await near.connection.provider.txStatus(\n  "6zgh2u9DqHHiXzdy9ouTP7oGky2T4nugqzqt9wJZwNFm",\n  "sender.testnet"\n);\n'))),(0,l.kt)(s.Z,{value:"http",label:"HTTPie",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'http post https://rpc.testnet.near.org jsonrpc=2.0 id=dontcare method=tx \\\n    params:=\'[ "6zgh2u9DqHHiXzdy9ouTP7oGky2T4nugqzqt9wJZwNFm", "sender.testnet"]\'\n')))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Example Result:"),(0,l.kt)("p",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "result": {\n    "status": {\n      "SuccessValue": ""\n    },\n    "transaction": {\n      "signer_id": "sender.testnet",\n      "public_key": "ed25519:Gowpa4kXNyTMRKgt5W7147pmcc2PxiFic8UHW9rsNvJ6",\n      "nonce": 15,\n      "receiver_id": "receiver.testnet",\n      "actions": [\n        {\n          "Transfer": {\n            "deposit": "1000000000000000000000000"\n          }\n        }\n      ],\n      "signature": "ed25519:3168QMdTpcwHvM1dmMYBc8hg9J3Wn8n7MWBSE9WrEpns6P5CaY87RM6k4uzyBkQuML38CZhU18HzmQEevPG1zCvk",\n      "hash": "6zgh2u9DqHHiXzdy9ouTP7oGky2T4nugqzqt9wJZwNFm"\n    },\n    "transaction_outcome": {\n      "proof": [\n        {\n          "hash": "F7mL76CMdfbdZ3xCehVGNh1fCyaR37gr3MeGX3EZkiVf",\n          "direction": "Right"\n        }\n      ],\n      "block_hash": "ADTMLVtkhsvzUxuf6m87Pt1dnF5vi1yY7ftxmNpFx7y",\n      "id": "6zgh2u9DqHHiXzdy9ouTP7oGky2T4nugqzqt9wJZwNFm",\n      "outcome": {\n        "logs": [],\n        "receipt_ids": ["3dMfwczW5GQqXbD9GMTnmf8jy5uACxG6FC5dWxm3KcXT"],\n        "gas_burnt": 223182562500,\n        "tokens_burnt": "22318256250000000000",\n        "executor_id": "sender.testnet",\n        "status": {\n          "SuccessReceiptId": "3dMfwczW5GQqXbD9GMTnmf8jy5uACxG6FC5dWxm3KcXT"\n        }\n      }\n    },\n    "receipts_outcome": [\n      {\n        "proof": [\n          {\n            "hash": "6h95oEd7ih62KXfyPT4zsZYont4qy9sWEXc5VQVDhqtG",\n            "direction": "Right"\n          },\n          {\n            "hash": "6DnibgZk1T669ZprcehUy1GpCSPw1kjzXRGu69nSaUNn",\n            "direction": "Right"\n          }\n        ],\n        "block_hash": "GgFTVr33r4MrpAiHc9mr8TZqLnpZAX1BaZTNvhBnciy2",\n        "id": "3dMfwczW5GQqXbD9GMTnmf8jy5uACxG6FC5dWxm3KcXT",\n        "outcome": {\n          "logs": [],\n          "receipt_ids": ["46KYgN8ddxs4Qy8C7BDQH49XUfcYZsaQmAvdU1nfcL9V"],\n          "gas_burnt": 223182562500,\n          "tokens_burnt": "22318256250000000000",\n          "executor_id": "receiver.testnet",\n          "status": {\n            "SuccessValue": ""\n          }\n        }\n      },\n      {\n        "proof": [\n          {\n            "hash": "CD9Y7Bw3MSFgaPZzpc1yP51ajhGDCAsR61qXcMNcRoHf",\n            "direction": "Left"\n          }\n        ],\n        "block_hash": "EGAgKuW6Bd6QKYSaxAkx2pPGmnjrjAcq4UpoUiqMXvPH",\n        "id": "46KYgN8ddxs4Qy8C7BDQH49XUfcYZsaQmAvdU1nfcL9V",\n        "outcome": {\n          "logs": [],\n          "receipt_ids": [],\n          "gas_burnt": 0,\n          "tokens_burnt": "0",\n          "executor_id": "sender.testnet",\n          "status": {\n            "SuccessValue": ""\n          }\n        }\n      }\n    ]\n  },\n  "id": "dontcare"\n}\n')))),(0,l.kt)("blockquote",{class:"warning"},(0,l.kt)("strong",null,"heads up"),(0,l.kt)("br",null),(0,l.kt)("br",null),(0,l.kt)("p",null,"In the case of function call transactions, this query will not wait for ",(0,l.kt)("strong",{parentName:"p"},"all")," receipts generated by this transaction to finish before returning a result. Rather, it will only wait for its return value to finish before returning; ",(0,l.kt)("em",{parentName:"p"},"which could be a promise"),"."),(0,l.kt)("p",null,'Let\'s say a transaction only contains a "function call" action that calls a ',(0,l.kt)("inlineCode",{parentName:"p"},"transfer()")," method like the one below ",(0,l.kt)("em",{parentName:"p"},"(written in ",(0,l.kt)("a",{parentName:"em",href:"https://www.rust-lang.org/"},"Rust"),")"),'. It will only wait for the "function call" receipt, not necessarily the receipt from the actual transfer of funds to finish before returning a result.'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn transfer(receiver_id: String) {\n    Promise::new(receiver_id).transfer(10);\n}\n")),(0,l.kt)("p",null,"However, if we slightly modify the function to have the promise as a return value, then the ",(0,l.kt)("inlineCode",{parentName:"p"},"tx")," status query will wait for this promise to finish ",(0,l.kt)("em",{parentName:"p"},"before")," returning results."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn transfer_promise(receiver_id: String) -> Promise {\n    Promise::new(receiver_id).transfer(10)\n}\n")),(0,l.kt)("p",null,"Despite such design, the ",(0,l.kt)("inlineCode",{parentName:"p"},"tx")," endpoint can be used to check whether all receipts have finished."),(0,l.kt)("p",null,"Instead of looking at the main result ",(0,l.kt)("inlineCode",{parentName:"p"},"status"),", we can check all of the receipts\nreturned ",(0,l.kt)("inlineCode",{parentName:"p"},"status")," and see if any are ",(0,l.kt)("inlineCode",{parentName:"p"},"Unknown"),". If none of the receipts statuses are unknown, we can be certain that all receipts generated have finished."),(0,l.kt)("p",null,"In addition, ",(0,l.kt)("inlineCode",{parentName:"p"},"tx")," endpoint does not provide finality guarantees. To make sure that the entire execution is final, it suffices to ensure every ",(0,l.kt)("inlineCode",{parentName:"p"},"block_hash")," in every outcome is ",(0,l.kt)("inlineCode",{parentName:"p"},"final"),".")),(0,l.kt)("h4",{id:"what-could-go-wrong-2"},"What could go wrong?"),(0,l.kt)("p",null,"When API request fails, RPC server returns a structured error response with a limited number of well-defined error variants, so client code can exhaustively handle all the possible error cases. Our JSON-RPC errors follow ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/joyent/node-verror"},"verror")," convention for structuring the error response:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "error": {\n        "name": <ERROR_TYPE>,\n        "cause": {\n            "info": {..},\n            "name": <ERROR_CAUSE>\n        },\n        "code": -32000,\n        "data": String,\n        "message": "Server error",\n    },\n    "id": "dontcare",\n    "jsonrpc": "2.0"\n}\n')),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Heads up")),(0,l.kt)("p",{parentName:"blockquote"},"The fields ",(0,l.kt)("inlineCode",{parentName:"p"},"code"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"data"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"message")," in the structure above are considered legacy ones and might be deprecated in the future. Please, don't rely on them.")),(0,l.kt)("p",null,"Here is the exhaustive list of the error variants that can be returned by ",(0,l.kt)("inlineCode",{parentName:"p"},"tx")," method:"),(0,l.kt)("table",{class:"custom-stripe"},(0,l.kt)("thead",null,(0,l.kt)("tr",null,(0,l.kt)("th",null,"ERROR_TYPE",(0,l.kt)("br",null),(0,l.kt)("code",null,"error.name")),(0,l.kt)("th",null,"ERROR_CAUSE",(0,l.kt)("br",null),(0,l.kt)("code",null,"error.cause.name")),(0,l.kt)("th",null,"Reason"),(0,l.kt)("th",null,"Solution"))),(0,l.kt)("tbody",null,(0,l.kt)("tr",null,(0,l.kt)("td",{rowspan:"3"},"HANDLER_ERROR"),(0,l.kt)("td",null,"INVALID_TRANSACTION"),(0,l.kt)("td",null,"An error happened during transaction execution"),(0,l.kt)("td",null,(0,l.kt)("ul",null,(0,l.kt)("li",null,"See ",(0,l.kt)("code",null,"error.cause.info")," for details")))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"UNKNOWN_TRANSACTION"),(0,l.kt)("td",null,"The requested transaction is not available on the node since it might have not been recorded on the chain yet or has been garbage-collected"),(0,l.kt)("td",null,(0,l.kt)("ul",null,(0,l.kt)("li",null,"Try again later"),(0,l.kt)("li",null,"If the transaction had been submitted more than 5 epochs ago, try to send your request to ",(0,l.kt)("a",{href:"https://near-nodes.io/intro/node-types#archival-node"},"an archival node")),(0,l.kt)("li",null,"Check the transaction hash")))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"TIMEOUT_ERROR"),(0,l.kt)("td",null,"It was unable to wait for the transaction status for reasonable time"),(0,l.kt)("td",null,(0,l.kt)("ul",null,(0,l.kt)("li",null,"Send a request to a different node"),(0,l.kt)("li",null,"Try again later")))),(0,l.kt)("tr",{class:"stripe"},(0,l.kt)("td",null,"REQUEST_VALIDATION_ERROR"),(0,l.kt)("td",null,"PARSE_ERROR"),(0,l.kt)("td",null,"Passed arguments can't be parsed by JSON RPC server (missing arguments, wrong format, etc.)"),(0,l.kt)("td",null,(0,l.kt)("ul",null,(0,l.kt)("li",null,"Check the arguments passed and pass the correct ones"),(0,l.kt)("li",null,"Check ",(0,l.kt)("code",null,"error.cause.info")," for more details")))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"INTERNAL_ERROR"),(0,l.kt)("td",null,"INTERNAL_ERROR"),(0,l.kt)("td",null,"Something went wrong with the node itself or overloaded"),(0,l.kt)("td",null,(0,l.kt)("ul",null,(0,l.kt)("li",null,"Try again later"),(0,l.kt)("li",null,"Send a request to a different node"),(0,l.kt)("li",null,"Check ",(0,l.kt)("code",null,"error.cause.info")," for more details")))))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"transaction-status-with-receipts"},"Transaction Status with Receipts"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Queries status of a transaction by hash, returning the final transaction result ",(0,l.kt)("em",{parentName:"p"},"and")," details of all receipts.")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"method: ",(0,l.kt)("inlineCode",{parentName:"li"},"EXPERIMENTAL_tx_status")),(0,l.kt)("li",{parentName:"ul"},"params:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"transaction hash")," ",(0,l.kt)("em",{parentName:"li"},"(see ",(0,l.kt)("a",{parentName:"em",href:"https://explorer.testnet.near.org"},"NEAR Explorer")," for a valid transaction hash)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"sender account id")," ",(0,l.kt)("em",{parentName:"li"},"(used to determine which shard to query for transaction)"))))),(0,l.kt)("p",null,"Example:"),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"json",label:"JSON",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "id": "dontcare",\n  "method": "EXPERIMENTAL_tx_status",\n  "params": ["HEgnVQZfs9uJzrqTob4g2Xmebqodq9waZvApSkrbcAhd", "bowen"]\n}\n'))),(0,l.kt)(s.Z,{value:"\ud83c\udf10 JavaScript",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'const response = await near.connection.provider.experimental_txStatus(\n  "HEgnVQZfs9uJzrqTob4g2Xmebqodq9waZvApSkrbcAhd",\n  "bowen"\n);\n'))),(0,l.kt)(s.Z,{value:"http",label:"HTTPie",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'http post https://rpc.testnet.near.org jsonrpc=2.0 method=EXPERIMENTAL_tx_status params:=\'["HEgnVQZfs9uJzrqTob4g2Xmebqodq9waZvApSkrbcAhd", "bowen"]\' id=dontcare\n')))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Example response:"),(0,l.kt)("p",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": "123",\n  "jsonrpc": "2.0",\n  "result": {\n    "receipts": [\n      {\n        "predecessor_id": "bowen",\n        "receipt": {\n          "Action": {\n            "actions": [\n              {\n                "FunctionCall": {\n                  "args": "eyJhbW91bnQiOiIxMDAwIiwicmVjZWl2ZXJfaWQiOiJib3dlbiJ9",\n                  "deposit": "0",\n                  "gas": 100000000000000,\n                  "method_name": "transfer"\n                }\n              }\n            ],\n            "gas_price": "186029458",\n            "input_data_ids": [],\n            "output_data_receivers": [],\n            "signer_id": "bowen",\n            "signer_public_key": "ed25519:2f9Zv5kuyuPM5DCyEP5pSqg58NQ8Ct9uSRerZXnCS9fK"\n          }\n        },\n        "receipt_id": "FXMVxdhSUZaZftbmPJWaoqhEB9GrKB2oqg9Wgvuyvom8",\n        "receiver_id": "evgeny.lockup.m0"\n      },\n      {\n        "predecessor_id": "evgeny.lockup.m0",\n        "receipt": {\n          "Action": {\n            "actions": [\n              {\n                "Transfer": {\n                  "deposit": "1000"\n                }\n              }\n            ],\n            "gas_price": "186029458",\n            "input_data_ids": [],\n            "output_data_receivers": [],\n            "signer_id": "bowen",\n            "signer_public_key": "ed25519:2f9Zv5kuyuPM5DCyEP5pSqg58NQ8Ct9uSRerZXnCS9fK"\n          }\n        },\n        "receipt_id": "3Ad7pUygUegMUWUb1rEazfjnTaHfptXCABqKQ6WNq6Wa",\n        "receiver_id": "bowen"\n      },\n      {\n        "predecessor_id": "system",\n        "receipt": {\n          "Action": {\n            "actions": [\n              {\n                "Transfer": {\n                  "deposit": "19200274886926125000"\n                }\n              }\n            ],\n            "gas_price": "0",\n            "input_data_ids": [],\n            "output_data_receivers": [],\n            "signer_id": "bowen",\n            "signer_public_key": "ed25519:2f9Zv5kuyuPM5DCyEP5pSqg58NQ8Ct9uSRerZXnCS9fK"\n          }\n        },\n        "receipt_id": "5DdQg9pfoJMX1q6bvhsjyyRihzA3sb9Uq5K1J7vK43Ze",\n        "receiver_id": "bowen"\n      },\n      {\n        "predecessor_id": "system",\n        "receipt": {\n          "Action": {\n            "actions": [\n              {\n                "Transfer": {\n                  "deposit": "18663792669276228632284"\n                }\n              }\n            ],\n            "gas_price": "0",\n            "input_data_ids": [],\n            "output_data_receivers": [],\n            "signer_id": "bowen",\n            "signer_public_key": "ed25519:2f9Zv5kuyuPM5DCyEP5pSqg58NQ8Ct9uSRerZXnCS9fK"\n          }\n        },\n        "receipt_id": "FDp8ovTf5uJYDFemW5op6ebjCT2n4CPExHYie3S1h4qp",\n        "receiver_id": "bowen"\n      }\n    ],\n    "receipts_outcome": [\n      {\n        "block_hash": "HuqYrYsC7h2VERFMgFkqaNqSiFuTH9CA3uJr3BkyNxhF",\n        "id": "FXMVxdhSUZaZftbmPJWaoqhEB9GrKB2oqg9Wgvuyvom8",\n        "outcome": {\n          "executor_id": "evgeny.lockup.m0",\n          "gas_burnt": 3493189769144,\n          "logs": ["Transferring 1000 to account @bowen"],\n          "receipt_ids": [\n            "3Ad7pUygUegMUWUb1rEazfjnTaHfptXCABqKQ6WNq6Wa",\n            "FDp8ovTf5uJYDFemW5op6ebjCT2n4CPExHYie3S1h4qp"\n          ],\n          "status": {\n            "SuccessReceiptId": "3Ad7pUygUegMUWUb1rEazfjnTaHfptXCABqKQ6WNq6Wa"\n          },\n          "tokens_burnt": "349318976914400000000"\n        },\n        "proof": [\n          {\n            "direction": "Right",\n            "hash": "5WwHEszBcpfrHnt2VTvVDVnEEACNq5EpQdjz1aW9gTAa"\n          }\n        ]\n      },\n      {\n        "block_hash": "DJ6oK5FtPPSwksS6pKdEjFvHWAaSVocnVNLoyi8aYk1k",\n        "id": "3Ad7pUygUegMUWUb1rEazfjnTaHfptXCABqKQ6WNq6Wa",\n        "outcome": {\n          "executor_id": "bowen",\n          "gas_burnt": 223182562500,\n          "logs": [],\n          "receipt_ids": ["5DdQg9pfoJMX1q6bvhsjyyRihzA3sb9Uq5K1J7vK43Ze"],\n          "status": {\n            "SuccessValue": ""\n          },\n          "tokens_burnt": "22318256250000000000"\n        },\n        "proof": [\n          {\n            "direction": "Right",\n            "hash": "CXSXmKpDU8R3UUrBAsffWMeGfKanKqEHCQrHeZkR3RKT"\n          },\n          {\n            "direction": "Right",\n            "hash": "2dNo7A1VHKBmMA86m1k3Z9DVXwWgQJGkKGRg8wUR3co9"\n          }\n        ]\n      },\n      {\n        "block_hash": "9cjUoqAksMbs7ZJ4CXiuwm8vppz9QctTwGmgwZ5mDmUA",\n        "id": "5DdQg9pfoJMX1q6bvhsjyyRihzA3sb9Uq5K1J7vK43Ze",\n        "outcome": {\n          "executor_id": "bowen",\n          "gas_burnt": 0,\n          "logs": [],\n          "receipt_ids": [],\n          "status": {\n            "SuccessValue": ""\n          },\n          "tokens_burnt": "0"\n        },\n        "proof": []\n      },\n      {\n        "block_hash": "DJ6oK5FtPPSwksS6pKdEjFvHWAaSVocnVNLoyi8aYk1k",\n        "id": "FDp8ovTf5uJYDFemW5op6ebjCT2n4CPExHYie3S1h4qp",\n        "outcome": {\n          "executor_id": "bowen",\n          "gas_burnt": 0,\n          "logs": [],\n          "receipt_ids": [],\n          "status": {\n            "SuccessValue": ""\n          },\n          "tokens_burnt": "0"\n        },\n        "proof": [\n          {\n            "direction": "Left",\n            "hash": "A2Ry6NCeuK8WhRCWc41hy6uddadc5nLJ1NBX5wVYo3Yb"\n          },\n          {\n            "direction": "Right",\n            "hash": "2dNo7A1VHKBmMA86m1k3Z9DVXwWgQJGkKGRg8wUR3co9"\n          }\n        ]\n      }\n    ],\n    "status": {\n      "SuccessValue": ""\n    },\n    "transaction": {\n      "actions": [\n        {\n          "FunctionCall": {\n            "args": "eyJhbW91bnQiOiIxMDAwIiwicmVjZWl2ZXJfaWQiOiJib3dlbiJ9",\n            "deposit": "0",\n            "gas": 100000000000000,\n            "method_name": "transfer"\n          }\n        }\n      ],\n      "hash": "HEgnVQZfs9uJzrqTob4g2Xmebqodq9waZvApSkrbcAhd",\n      "nonce": 77,\n      "public_key": "ed25519:2f9Zv5kuyuPM5DCyEP5pSqg58NQ8Ct9uSRerZXnCS9fK",\n      "receiver_id": "evgeny.lockup.m0",\n      "signature": "ed25519:5v1hJuw5RppKGezJHBFU6z3hwmmdferETud9rUbwxVf6xSBAWyiod93Lezaq4Zdcp4zbukDusQY9PjhV47JVCgBx",\n      "signer_id": "bowen"\n    },\n    "transaction_outcome": {\n      "block_hash": "9RX2pefXKw8M4EYjLznDF3AMvbkf9asAjN8ACK7gxKsa",\n      "id": "HEgnVQZfs9uJzrqTob4g2Xmebqodq9waZvApSkrbcAhd",\n      "outcome": {\n        "executor_id": "bowen",\n        "gas_burnt": 2428026088898,\n        "logs": [],\n        "receipt_ids": ["FXMVxdhSUZaZftbmPJWaoqhEB9GrKB2oqg9Wgvuyvom8"],\n        "status": {\n          "SuccessReceiptId": "FXMVxdhSUZaZftbmPJWaoqhEB9GrKB2oqg9Wgvuyvom8"\n        },\n        "tokens_burnt": "242802608889800000000"\n      },\n      "proof": [\n        {\n          "direction": "Right",\n          "hash": "DXf4XVmAF5jnjZhcxi1CYxGPuuQrcAmayq9X5inSAYvJ"\n        }\n      ]\n    }\n  }\n}\n')))),(0,l.kt)("h4",{id:"what-could-go-wrong-3"},"What could go wrong?"),(0,l.kt)("p",null,"When API request fails, RPC server returns a structured error response with a limited number of well-defined error variants, so client code can exhaustively handle all the possible error cases. Our JSON-RPC errors follow ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/joyent/node-verror"},"verror")," convention for structuring the error response:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "error": {\n        "name": <ERROR_TYPE>,\n        "cause": {\n            "info": {..},\n            "name": <ERROR_CAUSE>\n        },\n        "code": -32000,\n        "data": String,\n        "message": "Server error",\n    },\n    "id": "dontcare",\n    "jsonrpc": "2.0"\n}\n')),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Heads up")),(0,l.kt)("p",{parentName:"blockquote"},"The fields ",(0,l.kt)("inlineCode",{parentName:"p"},"code"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"data"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"message")," in the structure above are considered legacy ones and might be deprecated in the future. Please, don't rely on them.")),(0,l.kt)("p",null,"Here is the exhaustive list of the error variants that can be returned by ",(0,l.kt)("inlineCode",{parentName:"p"},"EXPERIMENTAL_tx_status")," method:"),(0,l.kt)("table",{class:"custom-stripe"},(0,l.kt)("thead",null,(0,l.kt)("tr",null,(0,l.kt)("th",null,"ERROR_TYPE",(0,l.kt)("br",null),(0,l.kt)("code",null,"error.name")),(0,l.kt)("th",null,"ERROR_CAUSE",(0,l.kt)("br",null),(0,l.kt)("code",null,"error.cause.name")),(0,l.kt)("th",null,"Reason"),(0,l.kt)("th",null,"Solution"))),(0,l.kt)("tbody",null,(0,l.kt)("tr",null,(0,l.kt)("td",{rowspan:"3"},"HANDLER_ERROR"),(0,l.kt)("td",null,"INVALID_TRANSACTION"),(0,l.kt)("td",null,"An error happened during transaction execution"),(0,l.kt)("td",null,(0,l.kt)("ul",null,(0,l.kt)("li",null,"See ",(0,l.kt)("code",null,"error.cause.info")," for details")))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"UNKNOWN_TRANSACTION"),(0,l.kt)("td",null,"The requested transaction is not available on the node since it might have not been recorded on the chain yet or has been garbage-collected"),(0,l.kt)("td",null,(0,l.kt)("ul",null,(0,l.kt)("li",null,"Try again later"),(0,l.kt)("li",null,"If the transaction had been submitted more than 5 epochs ago, try to send your request to ",(0,l.kt)("a",{href:"https://near-nodes.io/intro/node-types#archival-node"},"an archival node")),(0,l.kt)("li",null,"Check the transaction hash")))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"TIMEOUT_ERROR"),(0,l.kt)("td",null,"It was unable to wait for the transaction status for reasonable time"),(0,l.kt)("td",null,(0,l.kt)("ul",null,(0,l.kt)("li",null,"Send a request to a different node"),(0,l.kt)("li",null,"Try again later")))),(0,l.kt)("tr",{class:"stripe"},(0,l.kt)("td",null,"REQUEST_VALIDATION_ERROR"),(0,l.kt)("td",null,"PARSE_ERROR"),(0,l.kt)("td",null,"Passed arguments can't be parsed by JSON RPC server (missing arguments, wrong format, etc.)"),(0,l.kt)("td",null,(0,l.kt)("ul",null,(0,l.kt)("li",null,"Check the arguments passed and pass the correct ones"),(0,l.kt)("li",null,"Check ",(0,l.kt)("code",null,"error.cause.info")," for more details")))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"INTERNAL_ERROR"),(0,l.kt)("td",null,"INTERNAL_ERROR"),(0,l.kt)("td",null,"Something went wrong with the node itself or overloaded"),(0,l.kt)("td",null,(0,l.kt)("ul",null,(0,l.kt)("li",null,"Try again later"),(0,l.kt)("li",null,"Send a request to a different node"),(0,l.kt)("li",null,"Check ",(0,l.kt)("code",null,"error.cause.info")," for more details")))))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"receipt-by-id"},"Receipt by ID"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Fetches a receipt by it's ID (as is, without a status or execution outcome)")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"method: ",(0,l.kt)("inlineCode",{parentName:"li"},"EXPERIMENTAL_receipt")),(0,l.kt)("li",{parentName:"ul"},"params:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"receipt_id")," ",(0,l.kt)("em",{parentName:"li"},"(see ",(0,l.kt)("a",{parentName:"em",href:"https://explorer.testnet.near.org"},"NEAR Explorer")," for a valid receipt id)"))))),(0,l.kt)("p",null,"Example:"),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"json",label:"JSON",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "id": "dontcare",\n  "method": "EXPERIMENTAL_receipt",\n  "params": { "receipt_id": "2EbembRPJhREPtmHCrGv3Xtdm3xoc5BMVYHm3b2kjvMY" }\n}\n'))),(0,l.kt)(s.Z,{value:"http",label:"HTTPie",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'http post https://rpc.testnet.near.org jsonrpc=2.0 method=EXPERIMENTAL_receipt params:=\'{"receipt_id": "2EbembRPJhREPtmHCrGv3Xtdm3xoc5BMVYHm3b2kjvMY"}\' id=dontcare\n')))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Example response:"),(0,l.kt)("p",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": "dontcare",\n  "jsonrpc": "2.0",\n  "result": {\n    "predecessor_id": "bohdan.testnet",\n    "receipt": {\n      "Action": {\n        "actions": [\n          {\n            "Transfer": {\n              "deposit": "1000000000000000000000000"\n            }\n          }\n        ],\n        "gas_price": "103000000",\n        "input_data_ids": [],\n        "output_data_receivers": [],\n        "signer_id": "bohdan.testnet",\n        "signer_public_key": "ed25519:DhC7rPNTBwWJtmVXs1U1SqJztkn9AWbj6jCmQtkrg3TA"\n      }\n    },\n    "receipt_id": "2EbembRPJhREPtmHCrGv3Xtdm3xoc5BMVYHm3b2kjvMY",\n    "receiver_id": "frol.testnet"\n  }\n}\n')))),(0,l.kt)("h4",{id:"what-could-go-wrong-4"},"What could go wrong?"),(0,l.kt)("p",null,"When API request fails, RPC server returns a structured error response with a limited number of well-defined error variants, so client code can exhaustively handle all the possible error cases. Our JSON-RPC errors follow ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/joyent/node-verror"},"verror")," convention for structuring the error response:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "error": {\n        "name": <ERROR_TYPE>,\n        "cause": {\n            "info": {..},\n            "name": <ERROR_CAUSE>\n        },\n        "code": -32000,\n        "data": String,\n        "message": "Server error",\n    },\n    "id": "dontcare",\n    "jsonrpc": "2.0"\n}\n')),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Heads up")),(0,l.kt)("p",{parentName:"blockquote"},"The fields ",(0,l.kt)("inlineCode",{parentName:"p"},"code"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"data"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"message")," in the structure above are considered legacy ones and might be deprecated in the future. Please, don't rely on them.")),(0,l.kt)("p",null,"Here is the exhaustive list of the error variants that can be returned by ",(0,l.kt)("inlineCode",{parentName:"p"},"EXPERIMENTAL_receipt")," method:"),(0,l.kt)("table",null,(0,l.kt)("thead",null,(0,l.kt)("tr",null,(0,l.kt)("th",null,"ERROR_TYPE",(0,l.kt)("br",null),(0,l.kt)("code",null,"error.name")),(0,l.kt)("th",null,"ERROR_CAUSE",(0,l.kt)("br",null),(0,l.kt)("code",null,"error.cause.name")),(0,l.kt)("th",null,"Reason"),(0,l.kt)("th",null,"Solution"))),(0,l.kt)("tbody",null,(0,l.kt)("tr",null,(0,l.kt)("td",null,"HANDLER_ERROR"),(0,l.kt)("td",null,"UNKNOWN_RECEIPT"),(0,l.kt)("td",null,"The receipt with the given ",(0,l.kt)("code",null,"receipt_id")," was never observed on the node"),(0,l.kt)("td",null,(0,l.kt)("ul",null,(0,l.kt)("li",null,"Check the provided ",(0,l.kt)("code",null,"receipt_id")," is correct"),(0,l.kt)("li",null,"Send a request on a different node")))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"REQUEST_VALIDATION_ERROR"),(0,l.kt)("td",null,"PARSE_ERROR"),(0,l.kt)("td",null,"Passed arguments can't be parsed by JSON RPC server (missing arguments, wrong format, etc.)"),(0,l.kt)("td",null,(0,l.kt)("ul",null,(0,l.kt)("li",null,"Check the arguments passed and pass the correct ones"),(0,l.kt)("li",null,"Check ",(0,l.kt)("code",null,"error.cause.info")," for more details")))),(0,l.kt)("tr",null,(0,l.kt)("td",null,"INTERNAL_ERROR"),(0,l.kt)("td",null,"INTERNAL_ERROR"),(0,l.kt)("td",null,"Something went wrong with the node itself or overloaded"),(0,l.kt)("td",null,(0,l.kt)("ul",null,(0,l.kt)("li",null,"Try again later"),(0,l.kt)("li",null,"Send a request to a different node"),(0,l.kt)("li",null,"Check ",(0,l.kt)("code",null,"error.cause.info")," for more details")))))),(0,l.kt)("hr",null))}h.isMDXComponent=!0},23761:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/NEAR-Explorer-transactionHash-36197026539f03a09acb617584d95476.png"}}]);