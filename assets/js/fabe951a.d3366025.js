"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8108],{90346:(t,e,a)=>{a.d(e,{Ey:()=>d,O2:()=>p,SQ:()=>u});var n=a(67294),o=a(65488),r=a(85162),s=a(1841),i=a.n(s),l=a(95665),c=a.n(l);function p(t){var e=t.children;return Array.isArray(e)||(e=[e]),n.createElement(o.Z,{className:"language-tabs",groupId:"code-tabs"},e.map((function(t,e){return n.createElement(r.Z,{value:t.props.value,label:t.props.value},t)})))}function u(t){var e=t.children,a=t.language;return Array.isArray(e)||(e=[e]),e=e.map((function(t){return function(t,e){var a=t.props,o=a.children,r=a.url,s=a.start,l=a.end,c=a.fname;if("Github"==t.props.mdxType)return d({url:r,start:s,end:l,language:e,fname:c});if("CodeBlock"==t.props.mdxType)return n.createElement(i(),{fname:c,language:e},o);return t}(t,a)})),1==e.length?n.createElement(r.Z,{value:0,label:e[0].props.fname},e[0]):n.createElement(o.Z,{className:"file-tabs"},e.map((function(t,e){return n.createElement(r.Z,{value:e,label:t.props.fname},t)})))}function d(t){var e=t.url,a=t.start,o=t.end,r=t.language,s=t.fname,i=e+"#";return a&&o&&(i+="L"+a+"-L"+o+"#"),n.createElement(c(),{language:r,fname:s},i)}},85162:(t,e,a)=>{a.d(e,{Z:()=>s});var n=a(67294),o=a(86010);const r="tabItem_Ymn6";function s(t){var e=t.children,a=t.hidden,s=t.className;return n.createElement("div",{role:"tabpanel",className:(0,o.Z)(r,s),hidden:a},e)}},65488:(t,e,a)=>{a.d(e,{Z:()=>m});var n=a(87462),o=a(67294),r=a(86010),s=a(72389),i=a(67392),l=a(7094),c=a(12466);const p="tabList__CuJ",u="tabItem_LNqP";function d(t){var e,a,s=t.lazy,d=t.block,m=t.defaultValue,h=t.values,k=t.groupId,g=t.className,f=o.Children.map(t.children,(function(t){if((0,o.isValidElement)(t)&&"value"in t.props)return t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof t.type?t.type:t.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=h?h:f.map((function(t){var e=t.props;return{value:e.value,label:e.label,attributes:e.attributes}})),w=(0,i.l)(v,(function(t,e){return t.value===e.value}));if(w.length>0)throw new Error('Docusaurus error: Duplicate values "'+w.map((function(t){return t.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===m?m:null!=(e=null!=m?m:null==(a=f.find((function(t){return t.props.default})))?void 0:a.props.value)?e:f[0].props.value;if(null!==b&&!v.some((function(t){return t.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+v.map((function(t){return t.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=(0,l.U)(),N=y.tabGroupChoices,T=y.setTabGroupChoices,_=(0,o.useState)(b),x=_[0],C=_[1],S=[],E=(0,c.o5)().blockElementScrollPositionUntilNextRender;if(null!=k){var A=N[k];null!=A&&A!==x&&v.some((function(t){return t.value===A}))&&C(A)}var I=function(t){var e=t.currentTarget,a=S.indexOf(e),n=v[a].value;n!==x&&(E(e),C(n),null!=k&&T(k,String(n)))},R=function(t){var e,a=null;switch(t.key){case"ArrowRight":var n,o=S.indexOf(t.currentTarget)+1;a=null!=(n=S[o])?n:S[0];break;case"ArrowLeft":var r,s=S.indexOf(t.currentTarget)-1;a=null!=(r=S[s])?r:S[S.length-1]}null==(e=a)||e.focus()};return o.createElement("div",{className:(0,r.Z)("tabs-container",p)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":d},g)},v.map((function(t){var e=t.value,a=t.label,s=t.attributes;return o.createElement("li",(0,n.Z)({role:"tab",tabIndex:x===e?0:-1,"aria-selected":x===e,key:e,ref:function(t){return S.push(t)},onKeyDown:R,onFocus:I,onClick:I},s,{className:(0,r.Z)("tabs__item",u,null==s?void 0:s.className,{"tabs__item--active":x===e})}),null!=a?a:e)}))),s?(0,o.cloneElement)(f.filter((function(t){return t.props.value===x}))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},f.map((function(t,e){return(0,o.cloneElement)(t,{key:e,hidden:t.props.value!==x})}))))}function m(t){var e=(0,s.Z)();return o.createElement(d,(0,n.Z)({key:String(e)},t))}},55360:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>u,contentTitle:()=>c,default:()=>f,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var n=a(87462),o=a(63366),r=(a(67294),a(3905)),s=a(90346),i=["components"],l={id:"integration-test",title:"Integration Test"},c=void 0,p={unversionedId:"develop/testing/integration-test",id:"develop/testing/integration-test",title:"Integration Test",description:"",source:"@site/../docs/2.develop/testing/integration.md",sourceDirName:"2.develop/testing",slug:"/develop/testing/integration-test",permalink:"/develop/testing/integration-test",draft:!1,editUrl:"https://github.com/near/docs/edit/master/website/../docs/2.develop/testing/integration.md",tags:[],version:"current",lastUpdatedBy:"[sm-stack]",lastUpdatedAt:1675844989,formattedLastUpdatedAt:"Feb 8, 2023",frontMatter:{id:"integration-test",title:"Integration Test"},sidebar:"develop",previous:{title:"Unit Testing",permalink:"/develop/testing/unit-test"},next:{title:"Local Development",permalink:"/develop/testing/kurtosis-localnet"}},u={},d=[{value:"NEAR Workspaces",id:"near-workspaces",level:3},{value:"Snippet I: Testing Hello NEAR",id:"snippet-i-testing-hello-near",level:2},{value:"Snippet II: Testing Donations",id:"snippet-ii-testing-donations",level:2},{value:"Sandbox Testing",id:"sandbox-testing",level:2},{value:"Spooning Contracts",id:"spooning-contracts",level:3},{value:"Patch State on the Fly",id:"patch-state-on-the-fly",level:3},{value:"Time Traveling",id:"time-traveling",level:3},{value:"Using Testnet",id:"using-testnet",level:2},{value:"Additional Media",id:"additional-media",level:2},{value:"Test Driven Design Using Workspaces and AVA",id:"test-driven-design",level:4}],m=function(t){return function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}},h=m("Tabs"),k=m("TabItem"),g={toc:d};function f(t){var e=t.components,a=(0,o.Z)(t,i);return(0,r.kt)("wrapper",(0,n.Z)({},g,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Integration tests enable to deploy your contract in the NEAR ",(0,r.kt)("inlineCode",{parentName:"p"},"testnet")," or a local ",(0,r.kt)("inlineCode",{parentName:"p"},"sandbox"),", and create test-users to interact with it. In this way, you can thoroughly test your contract in a realistic environment."),(0,r.kt)("p",null,"Moreover, when using the local ",(0,r.kt)("inlineCode",{parentName:"p"},"sandbox")," you gain complete control of the network:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create test ",(0,r.kt)("inlineCode",{parentName:"li"},"Accounts")," and manipulate their ",(0,r.kt)("inlineCode",{parentName:"li"},"State")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Balance"),"."),(0,r.kt)("li",{parentName:"ol"},"Simulate errors on callbacks."),(0,r.kt)("li",{parentName:"ol"},"Control the time-flow and fast-forward into the future (Rust ready, TS coming soon).")),(0,r.kt)("h3",{id:"near-workspaces"},"NEAR Workspaces"),(0,r.kt)("p",null,"In NEAR, integration tests are implemented using a framework called ",(0,r.kt)("strong",{parentName:"p"},"Workspaces"),". Workspaces comes in two flavors: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/near/workspaces-rs"},"\ud83e\udd80 Rust")," and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/near/workspaces-js"},"\ud83c\udf10 Typescript"),"."),(0,r.kt)("p",null,"If you used one of our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/near-examples/docs-examples"},"examples")," as template, then integration testing using ",(0,r.kt)("inlineCode",{parentName:"p"},"workspaces-js")," is already implemented, and you simply need to run ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn test:integration")," from the project's root folder."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"snippet-i-testing-hello-near"},"Snippet I: Testing Hello NEAR"),(0,r.kt)("p",null,"Lets take a look at the test of our ",(0,r.kt)("a",{parentName:"p",href:"/develop/quickstart-guide"},"Quickstart Project")," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/near-examples/hello-near-rs"},"\ud83d\udc4b Hello NEAR"),", where we deploy the contract on an account and test it correctly retrieves and sets the greeting."),(0,r.kt)(s.O2,{mdxType:"CodeTabs"},(0,r.kt)(s.SQ,{value:"\ud83c\udf10 - Typescript",language:"ts",mdxType:"Language"},(0,r.kt)(s.Ey,{fname:"main.ava.ts",url:"https://github.com/near-examples/hello-near-js/blob/master/integration-tests/src/main.ava.ts",start:"9",end:"43",mdxType:"Github"}))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"snippet-ii-testing-donations"},"Snippet II: Testing Donations"),(0,r.kt)("p",null,"In most cases we will want to test complex methods involving multiple users and money transfers. A perfect example for this is our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/near-examples/donation-js"},"Donation Example"),", which enables users to ",(0,r.kt)("inlineCode",{parentName:"p"},"donate")," money to a beneficiary. Lets see its integration tests:"),(0,r.kt)(s.O2,{mdxType:"CodeTabs"},(0,r.kt)(s.SQ,{value:"\ud83c\udf10 JavaScript",language:"js",mdxType:"Language"},(0,r.kt)(s.Ey,{fname:"main.ava.ts",url:"https://github.com/near-examples/donation-js/blob/master/integration-tests/src/main.ava.ts",start:"50",end:"73",mdxType:"Github"}))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"sandbox-testing"},"Sandbox Testing"),(0,r.kt)("p",null,"NEAR Workspaces allows you to write tests once, and run them both on ",(0,r.kt)("inlineCode",{parentName:"p"},"testnet")," and on a controlled local ",(0,r.kt)("inlineCode",{parentName:"p"},"Sandbox"),". By ",(0,r.kt)("strong",{parentName:"p"},"default"),", Workspaces will start a ",(0,r.kt)("strong",{parentName:"p"},"sandbox")," and run your tests ",(0,r.kt)("strong",{parentName:"p"},"locally"),". Lets dive into the features of our framework and see how they can help you."),(0,r.kt)("h3",{id:"spooning-contracts"},"Spooning Contracts"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://coinmarketcap.com/alexandria/glossary/spoon-blockchain"},"Spooning a blockchain")," is copying the data from one network into a different network. NEAR Workspaces makes it easy to copy data from Mainnet or Testnet contracts into your local Sandbox environment:"),(0,r.kt)(h,{mdxType:"Tabs"},(0,r.kt)(k,{value:"\ud83c\udf10 JavaScript",label:"JavaScript",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const refFinance = await root.importContract({\n  mainnetContract: 'v2.ref-finance.near',\n  blockId: 50_000_000,\n  withData: true,\n});\n")),(0,r.kt)("p",null,"This would copy the Wasm bytes and contract state from ",(0,r.kt)("a",{parentName:"p",href:"https://explorer.near.org/accounts/v2.ref-finance.near"},"v2.ref-finance.near")," to your local blockchain as it existed at block ",(0,r.kt)("inlineCode",{parentName:"p"},"50_000_000"),". This makes use of Sandbox's special ",(0,r.kt)("a",{parentName:"p",href:"#patch-state-on-the-fly"},"patch state")," feature to keep the contract name the same, even though the top level account might not exist locally (note that this means it only works in Sandbox testing mode). You can then interact with the contract in a deterministic way the same way you interact with all other accounts created with near-workspaces."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"withData")," will only work out-of-the-box if the contract's data is 50kB or less. This is due to the default configuration of RPC servers; see ",(0,r.kt)("a",{parentName:"p",href:"/api/rpc/contracts#view-contract-state-view-contract-state"},'the "Heads Up" note here'),".")),(0,r.kt)("p",null,"See a ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/near/workspaces-js/blob/main/__tests__/05.spoon-contract-to-sandbox.ava.ts"},"TypeScript example of spooning")," contracts.")),(0,r.kt)(k,{value:"rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("p",null,"Specify the contract name from ",(0,r.kt)("inlineCode",{parentName:"p"},"testnet")," you want to be pulling, and a specific block ID referencing back to a specific time. (Just in case the contract you're referencing has been changed or updated)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'const CONTRACT_ACCOUNT: &str = "contract_account_name_on_testnet.testnet";\nconst BLOCK_HEIGHT: BlockHeight = 12345;\n')),(0,r.kt)("p",null,"Create a function called ",(0,r.kt)("inlineCode",{parentName:"p"},"pull_contract")," which will pull the contract's ",(0,r.kt)("inlineCode",{parentName:"p"},".wasm")," file from the chain and deploy it onto your local sandbox. You'll have to re-initialize it with all the data to run tests."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"async fn pull_contract(owner: &Account, worker: &Worker<Sandbox>) -> anyhow::Result<Contract> {\n    let testnet = workspaces::testnet_archival();\n    let contract_id: AccountId = CONTRACT_ACCOUNT.parse()?;\n")),(0,r.kt)("p",null,"This next line will actually pull down the relevant contract from testnet and set an initial balance on it with 1000 NEAR."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'    let contract = worker\n        .import_contract(&contract_id, &testnet)\n        .initial_balance(parse_near!("1000 N"))\n        .block_height(BLOCK_HEIGHT)\n        .transact()\n        .await?;\n')),(0,r.kt)("p",null,"Following that you'll have to init the contract again with your metadata.\nThis is because the contract's data is too big for the RPC service to pull down. (limits are set to 50Mb)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'    owner\n        .call(&worker, contract.id(), "init_method_name")\n        .args_json(serde_json::json!({\n            "arg1": value1,\n            "arg2": value2,\n        }))?\n        .transact()\n        .await?;\n    Ok(contract)\n}\n')))),(0,r.kt)("h3",{id:"patch-state-on-the-fly"},"Patch State on the Fly"),(0,r.kt)("p",null,"In Sandbox-mode, you can add or modify any contract state, contract code, account or access key with ",(0,r.kt)("inlineCode",{parentName:"p"},"patchState"),"."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You can alter contract code, accounts, and access keys using normal transactions via the ",(0,r.kt)("inlineCode",{parentName:"p"},"DeployContract"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"CreateAccount"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"AddKey")," ",(0,r.kt)("a",{parentName:"p",href:"https://nomicon.io/RuntimeSpec/Actions#addkeyaction"},"actions"),". But this limits you to altering your own account or sub-account. ",(0,r.kt)("inlineCode",{parentName:"p"},"patchState")," allows you to perform these operations on any account.")),(0,r.kt)("p",null,'Keep in mind that you cannot perform arbitrary mutation on contract state with transactions since transactions can only include contract calls that mutate state in a contract-programmed way. For example, with an NFT contract, you can perform some operation with NFTs you have ownership of, but you cannot manipulate NFTs that are owned by other accounts since the smart contract is coded with checks to reject that. This is the expected behavior of the NFT contract. However, you may want to change another person\'s NFT for a test setup. This is called "arbitrary mutation on contract state" and can be done with ',(0,r.kt)("inlineCode",{parentName:"p"},"patchState"),": "),(0,r.kt)(h,{mdxType:"Tabs"},(0,r.kt)(k,{value:"\ud83c\udf10 JavaScript",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"    const {contract, ali} = t.context.accounts;\n    // Contract must have some state for viewState & patchState to work\n    await ali.call(contract, 'set_status', {message: 'hello'});\n    // Get state\n    const state = await contract.viewState();\n    // Get raw value\n    const statusMessage = state.get('STATE', {schema, type: StatusMessage});\n    // Update contract state\n    statusMessage.records.push(\n      new BorshRecord({k: 'alice.near', v: 'hello world'}),\n    );\n    // Serialize and patch state back to runtime\n    await contract.patchState(\n      'STATE',\n      borsh.serialize(schema, statusMessage),\n    );\n    // Check again that the update worked\n    const result = await contract.view('get_status', {\n      account_id: 'alice.near',\n    });\n    t.is(result, 'hello world');\n")),(0,r.kt)("p",null,"To see a complete example of how to do this, see the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/near/workspaces-js/blob/main/__tests__/02.patch-state.ava.ts"},"patch-state test"),".")),(0,r.kt)(k,{value:"rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'    // Grab STATE from the testnet status_message contract. This contract contains the following data:\n    //   get_status(dev-20211013002148-59466083160385) => "hello from testnet"\n    let (testnet_contract_id, status_msg) = {\n        let worker = workspaces::testnet().await?;\n        let contract_id: AccountId = TESTNET_PREDEPLOYED_CONTRACT_ID\n            .parse()\n            .map_err(anyhow::Error::msg)?;\n        let mut state_items = worker.view_state(&contract_id, None).await?;\n        let state = state_items.remove(b"STATE".as_slice()).unwrap();\n        let status_msg = StatusMessage::try_from_slice(&state)?;\n        (contract_id, status_msg)\n    };\n    info!(target: "spooning", "Testnet: {:?}", status_msg);\n    // Create our sandboxed environment and grab a worker to do stuff in it:\n    let worker = workspaces::sandbox().await?;\n    // Deploy with the following status_message state: sandbox_contract_id => "hello from sandbox"\n    let sandbox_contract = deploy_status_contract(&worker, "hello from sandbox").await?;\n    // Patch our testnet STATE into our local sandbox:\n    worker\n        .patch_state(\n            sandbox_contract.id(),\n            "STATE".as_bytes(),\n            &status_msg.try_to_vec()?,\n        )\n        .await?;\n    // Now grab the state to see that it has indeed been patched:\n    let status: String = sandbox_contract\n        .view(\n            &worker,\n            "get_status",\n            serde_json::json!({\n                "account_id": testnet_contract_id,\n            })\n            .to_string()\n            .into_bytes(),\n        )\n        .await?\n        .json()?;\n    info!(target: "spooning", "New status patched: {:?}", status);\n    assert_eq!(&status, "hello from testnet");\n')))),(0,r.kt)("p",null,"As an alternative to ",(0,r.kt)("inlineCode",{parentName:"p"},"patchState"),", you can stop the node, dump state at genesis, edit the genesis, and restart the node.\nThis approach is more complex to do and also cannot be performed without restarting the node."),(0,r.kt)("h3",{id:"time-traveling"},"Time Traveling"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"workspaces")," testing offers support for forwarding the state of the blockchain to the future. This means contracts which require time sensitive data do not need to sit and wait the same amount of time for blocks on the sandbox to be produced. We can simply just call ",(0,r.kt)("inlineCode",{parentName:"p"},"worker.fast_forward")," to get us further in time:"),(0,r.kt)(h,{mdxType:"Tabs"},(0,r.kt)(k,{value:"\ud83c\udf10 JavaScript",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Time Traveling in ",(0,r.kt)("inlineCode",{parentName:"p"},"workspaces-js")," is currently unavailable."))),(0,r.kt)(k,{value:"rust",label:"Rust",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#[tokio::test]\nasync fn test_contract() -> anyhow::Result<()> {\n    let worker = workspaces::sandbox().await?;\n    let contract = worker.dev_deploy(WASM_BYTES);\n    let blocks_to_advance = 10000;\n    worker.fast_forward(blocks_to_advance);\n    // Now, "do_something_with_time" will be in the future and can act on future time-related state.\n    contract.call(&worker, "do_something_with_time")\n        .transact()\n        .await?;\n}\n')))),(0,r.kt)("p",null,"For a full Rust example, take a look at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/near/workspaces-rs/blob/main/examples/src/fast_forward.rs"},"examples/src/fast_forward.rs"),"."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"using-testnet"},"Using Testnet"),(0,r.kt)("p",null,"NEAR Workspaces is set up so that you can write tests once and run them against a local Sandbox node (the default behavior) or against ",(0,r.kt)("a",{parentName:"p",href:"/concepts/basics/networks"},"NEAR TestNet"),". Some reasons this might be helpful:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Gives higher confidence that your contracts work as expected"),(0,r.kt)("li",{parentName:"ul"},"You can test against deployed testnet contracts"),(0,r.kt)("li",{parentName:"ul"},"If something seems off in Sandbox mode, you can compare it to testnet")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"In order to use Workspaces in testnet mode you will need to have a ",(0,r.kt)("inlineCode",{parentName:"p"},"testnet")," account.\nYou can create one ",(0,r.kt)("a",{parentName:"p",href:"https://wallet.testnet.near.org/"},"here"),".")),(0,r.kt)("p",null,"You can switch to testnet mode in three ways."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"When creating Worker set network to ",(0,r.kt)("inlineCode",{parentName:"li"},"testnet")," and pass your master account:")),(0,r.kt)(h,{mdxType:"Tabs"},(0,r.kt)(k,{value:"\ud83c\udf10 JavaScript",label:"JavaScript",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const worker = await Worker.init({\n network: 'testnet',\n testnetMasterAccountId: '<yourAccountName>',\n})\n"))),(0,r.kt)(k,{value:"rust",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[tokio::main]  // or whatever runtime we want\nasync fn main() -> anyhow::Result<()> {\n// Create a sandboxed environment.\n// NOTE: Each call will create a new sandboxed environment\nlet worker = workspaces::sandbox().await?;\n// or for testnet:\nlet worker = workspaces::testnet().await?;\n}\n")))),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Set the ",(0,r.kt)("inlineCode",{parentName:"li"},"NEAR_WORKSPACES_NETWORK")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"TESTNET_MASTER_ACCOUNT_ID")," environment variables when running your tests:")),(0,r.kt)(h,{mdxType:"Tabs"},(0,r.kt)(k,{value:"\ud83c\udf10 JavaScript",label:"JavaScript",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"NEAR_WORKSPACES_NETWORK=testnet TESTNET_MASTER_ACCOUNT_ID=<your master account Id> node test.js\n")),(0,r.kt)("p",null,"If you set this environment variables and pass ",(0,r.kt)("inlineCode",{parentName:"p"},"{network: 'testnet', testnetMasterAccountId: <masterAccountId>}")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"Worker.init"),", the config object takes precedence."))),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"If using ",(0,r.kt)("inlineCode",{parentName:"li"},"near-workspaces")," with AVA, you can use a custom config file. Other test runners allow similar config files; adjust the following instructions for your situation.")),(0,r.kt)(h,{mdxType:"Tabs"},(0,r.kt)(k,{value:"\ud83c\udf10 JavaScript",label:"JavaScript",default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,"Create a file in the same directory as your ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," called ",(0,r.kt)("inlineCode",{parentName:"p"},"ava.testnet.config.cjs")," with the following contents:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"module.exports = {\n ...require('near-workspaces/ava.testnet.config.cjs'),\n ...require('./ava.config.cjs'),\n};\nmodule.exports.environmentVariables = {\n    TESTNET_MASTER_ACCOUNT_ID: '<masterAccountId>',\n};\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/near/workspaces-js/blob/main/ava.testnet.config.cjs"},"near-workspaces/ava.testnet.config.cjs")," import sets the ",(0,r.kt)("inlineCode",{parentName:"p"},"NEAR_WORKSPACES_NETWORK")," environment variable for you. A benefit of this approach is that you can then easily ignore files that should only run in Sandbox mode."),(0,r.kt)("p",null,"Now you'll also want to add a ",(0,r.kt)("inlineCode",{parentName:"p"},"test:testnet")," script to your ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"scripts")," section:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},'"scripts": {\n  "test": "ava",\n+  "test:testnet": "ava --config ./ava.testnet.config.cjs"\n}\n')))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"additional-media"},"Additional Media"),(0,r.kt)("h4",{id:"test-driven-design"},"Test Driven Design Using Workspaces and AVA"),(0,r.kt)("p",null,"The video below walks through how to apply TDD with Workspaces and AVA for a simple contract:"),(0,r.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube-nocookie.com/embed/LCu03IYwu1I",title:"TDD Using Workspaces",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}))}f.isMDXComponent=!0}}]);