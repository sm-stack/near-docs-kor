"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1544],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),k=c(n),d=r,m=k["".concat(s,".").concat(d)]||k[d]||u[d]||i;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=k;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},19896:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>c,toc:()=>u});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],l={id:"create-transactions",title:"Create Transactions",sidebar_label:"Create a Transaction"},s=void 0,c={unversionedId:"integrator/create-transactions",id:"integrator/create-transactions",title:"Create Transactions",description:"To construct & process transactions you will need our API JavaScript library: near-api-js. There are many ways to create transactions but for this example we'll show you two ways to create a simple token transfer transaction.",source:"@site/../docs/6.integrator/create-transactions.md",sourceDirName:"6.integrator",slug:"/integrator/create-transactions",permalink:"/integrator/create-transactions",draft:!1,editUrl:"https://github.com/near/docs/edit/master/website/../docs/6.integrator/create-transactions.md",tags:[],version:"current",lastUpdatedBy:"[sm-stack]",lastUpdatedAt:1675844989,formattedLastUpdatedAt:"Feb 8, 2023",frontMatter:{id:"create-transactions",title:"Create Transactions",sidebar_label:"Create a Transaction"},sidebar:"integrate",previous:{title:"Accounts",permalink:"/integrator/accounts"},next:{title:"Fungible Tokens",permalink:"/integrator/fungible-tokens"}},p={},u=[{value:"HIGH LEVEL -- Create a transaction",id:"high-level----create-a-transaction",level:2},{value:"Setup",id:"setup",level:3},{value:"Imports",id:"imports",level:3},{value:"Accounts &amp; Network",id:"accounts--network",level:3},{value:"Formatting Token Amounts",id:"formatting-token-amounts",level:3},{value:"Create a Key Store",id:"create-a-key-store",level:3},{value:"Setting up a connection to NEAR",id:"setting-up-a-connection-to-near",level:3},{value:"Create, Sign, &amp; Send Transaction",id:"create-sign--send-transaction",level:3},{value:"LOW LEVEL -- Create a Transaction",id:"low-level----create-a-transaction",level:2},{value:"Setup",id:"setup-1",level:3},{value:"Imports",id:"imports-1",level:3},{value:"Accounts &amp; Network",id:"accounts--network-1",level:3},{value:"Formatting Token Amounts",id:"formatting-token-amounts-1",level:3},{value:"Setting up a connection to NEAR",id:"setting-up-a-connection-to-near-1",level:3},{value:"Access Keys",id:"access-keys",level:3},{value:"Transaction Requirements",id:"transaction-requirements",level:3},{value:"1 <code>signerId</code>",id:"1-signerid",level:3},{value:"2 <code>signerPublicKey</code>",id:"2-signerpublickey",level:3},{value:"3 <code>receiverId</code>",id:"3-receiverid",level:3},{value:"4 <code>nonceForPublicKey</code>",id:"4-nonceforpublickey",level:3},{value:"5 <code>actions</code>",id:"5-actions",level:3},{value:"6 <code>blockHash</code>",id:"6-blockhash",level:3},{value:"Constructing the Transaction",id:"constructing-the-transaction",level:3},{value:"Sign Transaction",id:"sign-transaction",level:3},{value:"Send Transaction",id:"send-transaction",level:3},{value:"Transaction Results",id:"transaction-results",level:3}],k={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"To construct & process transactions you will need our API JavaScript library: ",(0,i.kt)("a",{parentName:"p",href:"/develop/integrate/frontend"},(0,i.kt)("inlineCode",{parentName:"a"},"near-api-js")),". There are many ways to create transactions but for this example we'll show you two ways to create a simple token transfer transaction."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#high-level----create-a-transaction"},"HIGH LEVEL")," - ",(0,i.kt)("em",{parentName:"li"},"easiest way to create a transaction")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#low-level----create-a-transaction"},"LOW LEVEL")," - ",(0,i.kt)("em",{parentName:"li"},"performs the exact same transaction as above, but deconstructs the entire process for those curious about each step"))),(0,i.kt)("p",null,"At the core, all transactions require the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"signerId")," ",(0,i.kt)("em",{parentName:"li"},"(account ID of the transaction originator)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"signerPublicKey")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"receiverId")," ",(0,i.kt)("em",{parentName:"li"},"(account ID of the transaction recipient)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nonceForPublicKey")," ",(0,i.kt)("em",{parentName:"li"},"(each time a key is used the nonce value should be incremented by 1)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"actions")," ",(0,i.kt)("em",{parentName:"li"},"( ",(0,i.kt)("a",{parentName:"em",href:"/concepts/basics/transactions/overview#action"},"[click here]")," for supported arguments)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"blockHash")," ",(0,i.kt)("em",{parentName:"li"},"(a current block hash (within 24hrs) to prove the transaction was recently created)"))),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"https://near.github.io/near-api-js/classes/transaction.Transaction"},"Transaction Class")," for a more in depth outline."),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"high-level----create-a-transaction"},"HIGH LEVEL -- Create a transaction"),(0,i.kt)("h3",{id:"setup"},"Setup"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Clone the ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/near-examples/transaction-examples"},"transaction-examples")," repository by running:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/near-examples/transaction-examples.git\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Follow ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/near-examples/transaction-examples/blob/master/README.md#prerequisites"},"setup instructions"))),(0,i.kt)("h3",{id:"imports"},"Imports"),(0,i.kt)("p",null,"In ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/near-examples/transaction-examples/blob/9e999253aafa2c3e3b537810a0b8ce7596c3506c/send-tokens-easy.js#L1-L5"},(0,i.kt)("inlineCode",{parentName:"a"},"send-tokens-easy.js"))," we use two dependencies:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/near/near-api-js"},"NEAR API JavaScript library")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/dotenv"},(0,i.kt)("inlineCode",{parentName:"a"},"dotenv"))," (used to load environment variables for private key)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const nearAPI = require("near-api-js");\nconst { connect, KeyPair, keyStores, utils } = nearAPI;\nrequire("dotenv").config();\n')),(0,i.kt)("p",null,"The second line above deconstructs several utilities from nearAPI that you will use to interact with the blockchain."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"connect")," - create a connection to NEAR passing configuration variables"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"KeyPair")," - creates a keyPair from the private key you'll provide in an ",(0,i.kt)("inlineCode",{parentName:"li"},".env")," file"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"keyStores")," - stores the keyPair that you will create from the private key and used to sign Transactions"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"utils")," - used to format NEAR amounts")),(0,i.kt)("h3",{id:"accounts--network"},"Accounts & Network"),(0,i.kt)("p",null,"Next, you'll need to enter the ",(0,i.kt)("inlineCode",{parentName:"p"},"accountId")," of the ",(0,i.kt)("inlineCode",{parentName:"p"},"sender")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"receiver"),", as well as the ",(0,i.kt)("inlineCode",{parentName:"p"},"networkId")," (",(0,i.kt)("inlineCode",{parentName:"p"},"betanet"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"testnet"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"mainnet"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const sender = "sender.testnet";\nconst receiver = "receiver.testnet";\nconst networkId = "testnet";\n')),(0,i.kt)("h3",{id:"formatting-token-amounts"},"Formatting Token Amounts"),(0,i.kt)("p",null,"When sending NEAR tokens (\u24c3) during a transaction, the amount needs to be converted into ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Yocto-"},"Yocto")," \u24c3 or (10^-24)."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"To perform this you will use the ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/near/near-api-js"},(0,i.kt)("inlineCode",{parentName:"a"},"near-api-js"))," method ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/near/near-api-js/blob/d4d4cf1ac3182fa998b1e004e6782219325a641b/src/utils/format.ts#L53-L63"},(0,i.kt)("inlineCode",{parentName:"a"},"parseNearAmount()"))," (located in ",(0,i.kt)("inlineCode",{parentName:"li"},"utils/format"),")")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const amount = nearAPI.utils.format.parseNearAmount("1.5");\n')),(0,i.kt)("h3",{id:"create-a-key-store"},"Create a Key Store"),(0,i.kt)("p",null,'In order to sign transactions you will need to create a "Key Store" that will hold a ',(0,i.kt)("a",{parentName:"p",href:"/concepts/basics/accounts/access-keys#full-access-keys"},"full access key")," to sign your transactions. There are several ways to accomplish this, but for this example we will use a private key stored in either an ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," file in your project or an environment variable exported globally."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If you created the account using ",(0,i.kt)("a",{parentName:"li",href:"/tools/near-cli"},(0,i.kt)("inlineCode",{parentName:"a"},"near-cli"))," or ran ",(0,i.kt)("a",{parentName:"li",href:"/tools/near-cli#for-accounts"},(0,i.kt)("inlineCode",{parentName:"a"},"near login"))," in your terminal, your private key can be found in a ",(0,i.kt)("inlineCode",{parentName:"li"},".json")," file located in ",(0,i.kt)("inlineCode",{parentName:"li"},"/HOME/.near-credentials"),"."),(0,i.kt)("li",{parentName:"ul"},"If you created an account using ",(0,i.kt)("a",{parentName:"li",href:"https://wallet.testnet.near.org/"},"NEAR Wallet"),", your key will be found in your browser's ",(0,i.kt)("inlineCode",{parentName:"li"},"Local Storage"),".",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"In your browser's dev tools... ",(0,i.kt)("inlineCode",{parentName:"li"},"Application")," >> ",(0,i.kt)("inlineCode",{parentName:"li"},"Storage")," >> ",(0,i.kt)("inlineCode",{parentName:"li"},"Local Storage"))))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// sets up an empty keyStore object in memory using near-api-js\nconst keyStore = new keyStores.InMemoryKeyStore();\n// creates a keyPair from the private key provided in your .env file\nconst keyPair = KeyPair.fromString(process.env.SENDER_PRIVATE_KEY);\n// adds the key you just created to your keyStore which can hold multiple keys (must be inside an async function)\nawait keyStore.setKey(networkId, sender, keyPair);\n")),(0,i.kt)("h3",{id:"setting-up-a-connection-to-near"},"Setting up a connection to NEAR"),(0,i.kt)("p",null,"Now create a connection to NEAR using a configuration object that will contain your ",(0,i.kt)("inlineCode",{parentName:"p"},"networkId")," setup earlier as well as your ",(0,i.kt)("inlineCode",{parentName:"p"},"keyStore"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// configuration used to connect to NEAR\nconst config = {\n  networkId,\n  keyStore,\n  nodeUrl: `https://rpc.${networkId}.near.org`,\n  walletUrl: `https://wallet.${networkId}.near.org`,\n  helperUrl: `https://helper.${networkId}.near.org`,\n  explorerUrl: `https://explorer.${networkId}.near.org`,\n};\n\n// connect to NEAR! :)\nconst near = await connect(config);\n// create a NEAR account object\nconst senderAccount = await near.account(sender);\n")),(0,i.kt)("p",null,"You'll notice the last line uses your NEAR connection to create a ",(0,i.kt)("inlineCode",{parentName:"p"},"senderAccount")," object that you'll use to perform the transaction."),(0,i.kt)("h3",{id:"create-sign--send-transaction"},"Create, Sign, & Send Transaction"),(0,i.kt)("p",null,"Now that everything is setup, creating the transaction is a single line of code."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const result = await senderAccount.sendMoney(receiver, amount);\n")),(0,i.kt)("p",null,"This simple command constructs, signs, and sends a token transfer transaction on the NEAR blockchain. There is not a need to create a ",(0,i.kt)("inlineCode",{parentName:"p"},"result")," variable aside from inspecting the response details from your transaction and even create a link to ",(0,i.kt)("a",{parentName:"p",href:"https://explorer.testnet.near.org/"},"NEAR Explorer")," to view a GUI version of the transaction details."),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"low-level----create-a-transaction"},"LOW LEVEL -- Create a Transaction"),(0,i.kt)("h3",{id:"setup-1"},"Setup"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Clone the ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/near-examples/transaction-examples"},"transaction-examples")," repository by running:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/near-examples/transaction-examples.git\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Follow ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/near-examples/transaction-examples/blob/master/README.md#prerequisites"},"setup instructions"))),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"imports-1"},"Imports"),(0,i.kt)("p",null,"In ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/near-examples/transaction-examples/blob/master/send-tokens-deconstructed.js#L1-L4"},(0,i.kt)("inlineCode",{parentName:"a"},"send-tokens-deconstructed.js"))," we use three dependencies:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/near/near-api-js"},"NEAR API JavaScript library")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/js-sha256"},(0,i.kt)("inlineCode",{parentName:"a"},"js-sha256"))," (cryptographic hashing algorithm)"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/dotenv"},(0,i.kt)("inlineCode",{parentName:"a"},"dotenv"))," (used to load environment variables)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const nearAPI = require("near-api-js");\nconst sha256 = require("js-sha256");\nrequire("dotenv").config();\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"accounts--network-1"},"Accounts & Network"),(0,i.kt)("p",null,"Next, you'll need to enter the ",(0,i.kt)("inlineCode",{parentName:"p"},"accountId")," of the ",(0,i.kt)("inlineCode",{parentName:"p"},"sender")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"receiver"),", as well as the ",(0,i.kt)("inlineCode",{parentName:"p"},"networkId")," (",(0,i.kt)("inlineCode",{parentName:"p"},"betanet"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"testnet"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"mainnet"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const sender = "sender.testnet";\nconst receiver = "receiver.testnet";\nconst networkId = "testnet";\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"formatting-token-amounts-1"},"Formatting Token Amounts"),(0,i.kt)("p",null,"When sending NEAR tokens (\u24c3) during a transaction, the amount needs to be converted into ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Yocto-"},"Yocto")," \u24c3 or (10^-24)."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"To perform this you will use the ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/near/near-api-js"},(0,i.kt)("inlineCode",{parentName:"a"},"near-api-js"))," method ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/near/near-api-js/blob/d4d4cf1ac3182fa998b1e004e6782219325a641b/src/utils/format.ts#L53-L63"},(0,i.kt)("inlineCode",{parentName:"a"},"parseNearAmount()"))," (located in ",(0,i.kt)("inlineCode",{parentName:"li"},"utils/format"),")")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const amount = nearAPI.utils.format.parseNearAmount("1.5");\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"setting-up-a-connection-to-near-1"},"Setting up a connection to NEAR"),(0,i.kt)("p",null,"In this example, we will create a NEAR RPC ",(0,i.kt)("inlineCode",{parentName:"p"},"provider")," that allows us to interact with the chain via ",(0,i.kt)("a",{parentName:"p",href:"/api/rpc/introduction"},"RPC endpoints"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const provider = new nearAPI.providers.JsonRpcProvider(\n  `https://rpc.${networkId}.near.org`\n);\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"access-keys"},"Access Keys"),(0,i.kt)("p",null,"To sign a transaction to send NEAR \u24c3, we will need a ",(0,i.kt)("inlineCode",{parentName:"p"},"FullAccess")," key to the sender's account."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If you created the account using ",(0,i.kt)("a",{parentName:"li",href:"/tools/near-cli"},(0,i.kt)("inlineCode",{parentName:"a"},"near-cli"))," or ran ",(0,i.kt)("a",{parentName:"li",href:"/tools/near-cli#for-accounts"},(0,i.kt)("inlineCode",{parentName:"a"},"near login"))," in your terminal, your private key can be found in a ",(0,i.kt)("inlineCode",{parentName:"li"},".json")," file located in ",(0,i.kt)("inlineCode",{parentName:"li"},"/HOME/.near-credentials"),"."),(0,i.kt)("li",{parentName:"ul"},"If you created an account using ",(0,i.kt)("a",{parentName:"li",href:"https://wallet.testnet.near.org/"},"NEAR Wallet"),", your key will be found in your browser's ",(0,i.kt)("inlineCode",{parentName:"li"},"Local Storage"),".",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"In your browser's dev tools... ",(0,i.kt)("inlineCode",{parentName:"li"},"Application")," >> ",(0,i.kt)("inlineCode",{parentName:"li"},"Storage")," >> ",(0,i.kt)("inlineCode",{parentName:"li"},"Local Storage"))))),(0,i.kt)("p",null,"Once you have access to the private key of the sender's account, create an environment variable ",(0,i.kt)("inlineCode",{parentName:"p"},"SENDER_PRIVATE_KEY")," or hard code it as a string on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/near-examples/transaction-examples/blob/master/send-tokens-deconstructed.js#L18"},"line 18")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"send-tokens.js"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"With this ",(0,i.kt)("inlineCode",{parentName:"li"},"privateKey"),", we can now construct a ",(0,i.kt)("inlineCode",{parentName:"li"},"keyPair")," object to sign transactions.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const privateKey = process.env.SENDER_PRIVATE_KEY;\nconst keyPair = nearAPI.utils.key_pair.KeyPairEd25519.fromString(privateKey);\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"transaction-requirements"},"Transaction Requirements"),(0,i.kt)("p",null,"As stated before, all transactions require six parts:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#1-signerid"},(0,i.kt)("inlineCode",{parentName:"a"},"signerId"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#2-signerpublickey"},(0,i.kt)("inlineCode",{parentName:"a"},"signerPublicKey"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#3-receiverid"},(0,i.kt)("inlineCode",{parentName:"a"},"receiverId"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#4-nonceforpublickey"},(0,i.kt)("inlineCode",{parentName:"a"},"nonceForPublicKey"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"/concepts/basics/transactions/overview#action"},(0,i.kt)("inlineCode",{parentName:"a"},"actions"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#6-blockhash"},(0,i.kt)("inlineCode",{parentName:"a"},"blockHash")))),(0,i.kt)("h3",{id:"1-signerid"},"1 ",(0,i.kt)("inlineCode",{parentName:"h3"},"signerId")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"signerId")," is the account ID of the transaction originator."),(0,i.kt)("li",{parentName:"ul"},"This value is passed as a string (ex. ",(0,i.kt)("inlineCode",{parentName:"li"},"'example.testnet'")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"'bob.near'"),")")),(0,i.kt)("h3",{id:"2-signerpublickey"},"2 ",(0,i.kt)("inlineCode",{parentName:"h3"},"signerPublicKey")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"signerPublicKey")," is required to be an object with two key value pairs: ",(0,i.kt)("inlineCode",{parentName:"li"},"keyType")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"data"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"PublicKey = {\n  keyType: 0,\n  data: Uint8Array(32)[\n    (190,\n    150,\n    152,\n    145,\n    232,\n    248,\n    128,\n    151,\n    167,\n    165,\n    128,\n    46,\n    20,\n    231,\n    103,\n    142,\n    39,\n    56,\n    152,\n    46,\n    135,\n    1,\n    161,\n    180,\n    94,\n    212,\n    195,\n    201,\n    73,\n    190,\n    70,\n    242)\n  ],\n};\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This can be constructed by calling ",(0,i.kt)("inlineCode",{parentName:"li"},"getPublicKey()")," using the ",(0,i.kt)("inlineCode",{parentName:"li"},"keyPair")," we ",(0,i.kt)("a",{parentName:"li",href:"#access-keys"},"setup earlier"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const publicKey = keyPair.getPublicKey();\n")),(0,i.kt)("h3",{id:"3-receiverid"},"3 ",(0,i.kt)("inlineCode",{parentName:"h3"},"receiverId")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"receiverId")," is the account ID of the transaction recipient."),(0,i.kt)("li",{parentName:"ul"},"This value is passed as a string (ex. ",(0,i.kt)("inlineCode",{parentName:"li"},"'example.testnet'")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"'bob.near'"),")"),(0,i.kt)("li",{parentName:"ul"},"The certain cases, the ",(0,i.kt)("inlineCode",{parentName:"li"},"signerId")," and the ",(0,i.kt)("inlineCode",{parentName:"li"},"receiverId")," can be the same account.")),(0,i.kt)("h3",{id:"4-nonceforpublickey"},"4 ",(0,i.kt)("inlineCode",{parentName:"h3"},"nonceForPublicKey")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A unique number or ",(0,i.kt)("inlineCode",{parentName:"li"},"nonce")," is required for each transaction signed with an access key."),(0,i.kt)("li",{parentName:"ul"},"To ensure a unique number is created for each transaction, the current ",(0,i.kt)("inlineCode",{parentName:"li"},"nonce")," should be queried and then incremented by 1."),(0,i.kt)("li",{parentName:"ul"},"Current nonce can be retrieved using the ",(0,i.kt)("inlineCode",{parentName:"li"},"provider")," we ",(0,i.kt)("a",{parentName:"li",href:"#setting-up-a-connection-to-near"},"created earlier"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const accessKey = await provider.query(\n  `access_key/${sender}/${publicKey.toString()}`,\n  ""\n);\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"now we can create a unique number for our transaction by incrementing the current ",(0,i.kt)("inlineCode",{parentName:"li"},"nonce"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const nonce = ++accessKey.nonce;\n")),(0,i.kt)("h3",{id:"5-actions"},"5 ",(0,i.kt)("inlineCode",{parentName:"h3"},"actions")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"There are currently eight supported ",(0,i.kt)("inlineCode",{parentName:"li"},"Action")," types. ",(0,i.kt)("a",{parentName:"li",href:"/concepts/basics/transactions/overview#action"},"[see here]")),(0,i.kt)("li",{parentName:"ul"},"For this example, we are using ",(0,i.kt)("inlineCode",{parentName:"li"},"Transfer")),(0,i.kt)("li",{parentName:"ul"},"This transfer action can be created using the ",(0,i.kt)("a",{parentName:"li",href:"#imports"},"imported ",(0,i.kt)("inlineCode",{parentName:"a"},"nearAPI")," object")," and the ",(0,i.kt)("a",{parentName:"li",href:"#formatting-token-amounts"},"formatted \u24c3 amount")," created earlier.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const actions = [nearAPI.transactions.transfer(amount)];\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/near/near-api-js/blob/d4d4cf1ac3182fa998b1e004e6782219325a641b/src/transaction.ts#L70-L72"},"[click here]")," to view source for ",(0,i.kt)("inlineCode",{parentName:"p"},"transfer()"),"."),(0,i.kt)("h3",{id:"6-blockhash"},"6 ",(0,i.kt)("inlineCode",{parentName:"h3"},"blockHash")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Each transaction requires a current block hash (within 24hrs) to prove that the transaction was created recently."),(0,i.kt)("li",{parentName:"ul"},"Hash must be converted to an array of bytes using the ",(0,i.kt)("inlineCode",{parentName:"li"},"base_decode")," method found in ",(0,i.kt)("a",{parentName:"li",href:"#imports"},(0,i.kt)("inlineCode",{parentName:"a"},"nearAPI")),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const recentBlockHash = nearAPI.utils.serialize.base_decode(\n  accessKey.block_hash\n);\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/near/near-api-js/blob/d4d4cf1ac3182fa998b1e004e6782219325a641b/src/utils/serialize.ts#L16-L17"},"[click here]")," to view source for ",(0,i.kt)("inlineCode",{parentName:"p"},"base_decode()"),"."),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"constructing-the-transaction"},"Constructing the Transaction"),(0,i.kt)("p",null,"With all of our ",(0,i.kt)("a",{parentName:"p",href:"#transaction-requirements"},"required arguments"),", we can construct the transaction."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Using ",(0,i.kt)("a",{parentName:"li",href:"#imports"},(0,i.kt)("inlineCode",{parentName:"a"},"nearAPI")),", we call on ",(0,i.kt)("inlineCode",{parentName:"li"},"createTransaction()")," to perform this task.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const transaction = nearAPI.transactions.createTransaction(\n  sender,\n  publicKey,\n  receiver,\n  nonce,\n  actions,\n  recentBlockHash\n);\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/near/near-api-js/blob/d4d4cf1ac3182fa998b1e004e6782219325a641b/src/transaction.ts#L95-L110"},"[click here]")," to view source code for the Transaction class"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"sign-transaction"},"Sign Transaction"),(0,i.kt)("p",null,"Now that the transaction is created, we sign it before sending it to the NEAR blockchain. At the lowest level, there are four steps to this process."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Using ",(0,i.kt)("a",{parentName:"li",href:"#imports"},(0,i.kt)("inlineCode",{parentName:"a"},"nearAPI")),", we call on ",(0,i.kt)("inlineCode",{parentName:"li"},"serialize()")," to serialize the transaction in ",(0,i.kt)("a",{parentName:"li",href:"https://borsh.io/"},"Borsh"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const serializedTx = nearAPI.utils.serialize.serialize(\n  nearAPI.transactions.SCHEMA,\n  transaction\n);\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Hash the serialized transaction using a ",(0,i.kt)("inlineCode",{parentName:"li"},"sha256")," cryptographic hashing algorithm.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const serializedTxHash = new Uint8Array(sha256.sha256.array(serializedTx));\n")),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"Create a signature with the ",(0,i.kt)("inlineCode",{parentName:"li"},"keyPair"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const signature = keyPair.sign(serializedTxHash);\n")),(0,i.kt)("ol",{start:4},(0,i.kt)("li",{parentName:"ol"},"Construct the signed transaction using ",(0,i.kt)("inlineCode",{parentName:"li"},"near-api-js")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/near/near-api-js/blob/d4d4cf1ac3182fa998b1e004e6782219325a641b/src/transaction.ts#L112-L123"},"SignedTransaction class"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const signedTransaction = new nearAPI.transactions.SignedTransaction({\n  transaction,\n  signature: new nearAPI.transactions.Signature({\n    keyType: transaction.publicKey.keyType,\n    data: signature.signature,\n  }),\n});\n")),(0,i.kt)("h3",{id:"send-transaction"},"Send Transaction"),(0,i.kt)("p",null,"Final step is to encode and send the transaction."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"First we serialize transaction into ",(0,i.kt)("a",{parentName:"li",href:"https://borsh.io/"},"Borsh"),", and store the result as ",(0,i.kt)("inlineCode",{parentName:"li"},"signedSerializedTx"),". ",(0,i.kt)("em",{parentName:"li"},"(required for all transactions)")),(0,i.kt)("li",{parentName:"ul"},"Then we send the transaction via ",(0,i.kt)("a",{parentName:"li",href:"/api/rpc/introduction"},"RPC call")," using the ",(0,i.kt)("inlineCode",{parentName:"li"},"sendJsonRpc()")," method nested inside ",(0,i.kt)("a",{parentName:"li",href:"#setting-up-connection-to-near"},(0,i.kt)("inlineCode",{parentName:"a"},"near")),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'// encodes transaction to serialized Borsh (required for all transactions)\nconst signedSerializedTx = signedTransaction.encode();\n// sends transaction to NEAR blockchain via JSON RPC call and records the result\nconst result = await provider.sendJsonRpc("broadcast_tx_commit", [\n  Buffer.from(signedSerializedTx).toString("base64"),\n]);\n')),(0,i.kt)("h3",{id:"transaction-results"},"Transaction Results"),(0,i.kt)("p",null,"Detailed transaction results of the transaction are returned in the following format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"{\n  status: { SuccessValue: '' },\n  transaction: {\n    signer_id: 'sender.testnet',\n    public_key: 'ed25519:8RazSLHvzj4TBSKGUo5appP7wVeqZNQYjP9hvhF4ZKS2',\n    nonce: 57,\n    receiver_id: 'receiver.testnet',\n    actions: [ [Object] ],\n    signature: 'ed25519:2sK53w6hybSxX7qWShXz6xKnjnYRUW7Co3evEaaggNW6pGSCNPvx7urY4akwnzAbxZGwsKjx8dcVm73qbitntJjz',\n    hash: 'EgGzB73eFxCwZRGcEyCKedLjvvgxhDXcUtq21SqAh79j'\n  },\n  transaction_outcome: {\n    proof: [ [Object] ],\n    block_hash: 'J6cFDzAFkuknHMCEYW2uPQXDvCfSndkJmADVEWJbtTwV',\n    id: 'EgGzB73eFxCwZRGcEyCKedLjvvgxhDXcUtq21SqAh79j',\n    outcome: {\n      logs: [],\n      receipt_ids: [Array],\n      gas_burnt: 223182562500,\n      tokens_burnt: '22318256250000000000',\n      executor_id: 'sender.testnet',\n      status: [Object]\n    }\n  },\n  receipts_outcome: [\n    {\n      proof: [Array],\n      block_hash: 'FSS7UzTpMr4mUm6aw8MmzP6Q7wnQs35VS8vYm1R461dM',\n      id: '3LjBxe2jq1s7XEPrYxihp4rPVdyHAbYfkcdJjUEVijhJ',\n      outcome: [Object]\n    },\n    {\n      proof: [Array],\n      block_hash: '4XBio5dM5UGYjJgzZjgckfVgMZ9uKGbTkt8zZi5webxw',\n      id: 'AXFA4kwiYfruKQ4LkD1qZA8P7HoAvtFwGqwQYdWtWNaW',\n      outcome: [Object]\n    }\n  ]\n}\nTransaction Results:  {\n  signer_id: 'sender.testnet',\n  public_key: 'ed25519:8RazSLHvzj4TBSKGUo5appP7wVeqZNQYjP9hvhF4ZKS2',\n  nonce: 57,\n  receiver_id: 'receiver.testnet',\n  actions: [ { Transfer: [Object] } ],\n  signature: 'ed25519:2sK53w6hybSxX7qWShXz6xKnjnYRUW7Co3evEaaggNW6pGSCNPvx7urY4akwnzAbxZGwsKjx8dcVm73qbitntJjz',\n  hash: 'EgGzB73eFxCwZRGcEyCKedLjvvgxhDXcUtq21SqAh79j'\n}\n")),(0,i.kt)("p",null,"For detailed information on transaction receipts ",(0,i.kt)("a",{parentName:"p",href:"https://nomicon.io/RuntimeSpec/Receipts.html"},"[click here]")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"To view the transaction in ",(0,i.kt)("a",{parentName:"li",href:"https://explorer.testnet.near.org/"},"NEAR Explorer"),", enter the ",(0,i.kt)("inlineCode",{parentName:"li"},"hash")," located under ",(0,i.kt)("inlineCode",{parentName:"li"},"transaction")," / ",(0,i.kt)("inlineCode",{parentName:"li"},"Transaction Results"),"."),(0,i.kt)("li",{parentName:"ul"},"In addition, you can create a link in JS using the ",(0,i.kt)("inlineCode",{parentName:"li"},"networkId")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"result.transaction.hash"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const transactionLink = `https://explorer.${networkId}.near.org/transactions/${result.transaction.hash}`;\n")),(0,i.kt)("admonition",{title:"Got a question?",type:"tip"},(0,i.kt)("a",{href:"https://stackoverflow.com/questions/tagged/nearprotocol"},(0,i.kt)("h8",null,"Ask it on StackOverflow!"))),(0,i.kt)("p",null,"Happy Coding! \ud83d\ude80"))}d.isMDXComponent=!0}}]);