"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2799],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>m});var o=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,o,a=function(t,e){if(null==t)return{};var n,o,a={},r=Object.keys(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var s=o.createContext({}),u=function(t){var e=o.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=u(t.components);return o.createElement(s.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},d=o.forwardRef((function(t,e){var n=t.components,a=t.mdxType,r=t.originalType,s=t.parentName,p=l(t,["components","mdxType","originalType","parentName"]),d=u(n),m=a,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||r;return n?o.createElement(h,i(i({ref:e},p),{},{components:n})):o.createElement(h,i({ref:e},p))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l.mdxType="string"==typeof t?t:a,i[1]=l;for(var u=2;u<r;u++)i[u]=n[u];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},40987:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>u,toc:()=>c});var o=n(87462),a=n(63366),r=(n(67294),n(3905)),i=["components"],l={id:"enumeration",title:"Enumeration",sidebar_label:"Enumeration"},s=void 0,u={unversionedId:"tutorials/nfts/enumeration",id:"tutorials/nfts/enumeration",title:"Enumeration",description:"In the previous tutorials, you looked at ways to integrate the minting functionality into a skeleton smart contract. In order to get your NFTs to show in the wallet, you also had to deploy a patch fix that implemented one of the enumeration methods. In this tutorial, you'll expand on and finish the rest of the enumeration methods as per the standard",source:"@site/../docs/3.tutorials/nfts/3-enumeration.md",sourceDirName:"3.tutorials/nfts",slug:"/tutorials/nfts/enumeration",permalink:"/near-docs-kor/vi/tutorials/nfts/enumeration",draft:!1,editUrl:"https://github.com/near/docs/edit/master/website/../docs/3.tutorials/nfts/3-enumeration.md",tags:[],version:"current",lastUpdatedBy:"[sm-stack]",lastUpdatedAt:1675844989,formattedLastUpdatedAt:"8 thg 2, 2023",sidebarPosition:3,frontMatter:{id:"enumeration",title:"Enumeration",sidebar_label:"Enumeration"},sidebar:"tutorials",previous:{title:"Upgrade a Contract",permalink:"/near-docs-kor/vi/tutorials/nfts/upgrade-contract"},next:{title:"Core",permalink:"/near-docs-kor/vi/tutorials/nfts/core"}},p={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Modifications to the contract",id:"modifications-to-the-contract",level:2},{value:"Redeploying the contract",id:"redeploying-contract",level:2},{value:"Enumerating tokens",id:"enumerating-tokens",level:2},{value:"NFT tokens",id:"nft-tokens",level:3},{value:"Tokens by owner",id:"tokens-by-owner",level:3},{value:"Conclusion",id:"conclusion",level:2}],d={toc:c};function m(t){var e=t.components,n=(0,a.Z)(t,i);return(0,r.kt)("wrapper",(0,o.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In the previous tutorials, you looked at ways to integrate the minting functionality into a skeleton smart contract. In order to get your NFTs to show in the wallet, you also had to deploy a patch fix that implemented one of the enumeration methods. In this tutorial, you'll expand on and finish the rest of the enumeration methods as per the ",(0,r.kt)("a",{parentName:"p",href:"https://nomicon.io/Standards/NonFungibleToken/Enumeration.html"},"standard"),"\nNow you'll extend the NFT smart contract and add a couple of enumeration methods that can be used to return the contract's state."),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"As mentioned in the ",(0,r.kt)("a",{parentName:"p",href:"/tutorials/nfts/upgrade-contract/"},"Upgrade a Contract")," tutorial, you can deploy patches and fixes to smart contracts. This time, you'll use that knowledge to implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"nft_total_supply"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"nft_tokens")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"nft_supply_for_owner")," enumeration functions."),(0,r.kt)("p",null,"To get started, either switch to the ",(0,r.kt)("inlineCode",{parentName:"p"},"2.minting")," branch from our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/near-examples/nft-tutorial/"},"GitHub repository"),", or continue your work from the previous tutorials.\nIf you haven't cloned it yet, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/tutorials/nfts/skeleton#building-the-skeleton"},"Contract Architecture")," to check out the repository."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout 2.minting\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you wish to see the finished code for this ",(0,r.kt)("em",{parentName:"p"},"Enumeration")," tutorial, you can find it on the ",(0,r.kt)("inlineCode",{parentName:"p"},"3.enumeration")," branch.")),(0,r.kt)("h2",{id:"modifications-to-the-contract"},"Modifications to the contract"),(0,r.kt)("p",null,"Let's start by opening the  ",(0,r.kt)("inlineCode",{parentName:"p"},"src/enumeration.rs")," file and locating the empty ",(0,r.kt)("inlineCode",{parentName:"p"},"nft_total_supply")," function. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"nft_total_supply")),(0,r.kt)("p",null,"This function should return the total number of NFTs stored on the contract. You can easily achieve this functionality by simply returning the length of the ",(0,r.kt)("inlineCode",{parentName:"p"},"nft_metadata_by_id")," data structure."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:"reference",reference:!0},"https://github.com/near-examples/nft-tutorial/blob/3.enumeration/nft-contract/src/enumeration.rs#L5-L9\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"nft_token")),(0,r.kt)("p",null,"This function should return a paginated list of ",(0,r.kt)("inlineCode",{parentName:"p"},"JsonTokens")," that are stored on the contract regardless of their owners.\nIf the user provides a ",(0,r.kt)("inlineCode",{parentName:"p"},"from_index")," parameter, you should use that as the starting point for which to start iterating through tokens; otherwise it should start from the beginning. Likewise, if the user provides a ",(0,r.kt)("inlineCode",{parentName:"p"},"limit")," parameter, the function shall stop after reaching either the limit or the end of the list."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Rust has useful methods for pagination, allowing you to skip to a starting index and taking the first ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," elements of an iterator.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:"reference",reference:!0},"https://github.com/near-examples/nft-tutorial/blob/3.enumeration/nft-contract/src/enumeration.rs#L11-L27\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"nft_supply_for_owner")),(0,r.kt)("p",null,"This function should look for all the non-fungible tokens for a user-defined owner, and return the length of the resulting set.\nIf there isn't a set of tokens for the provided ",(0,r.kt)("inlineCode",{parentName:"p"},"AccountID"),", then the function shall return ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:"reference",reference:!0},"https://github.com/near-examples/nft-tutorial/blob/3.enumeration/nft-contract/src/enumeration.rs#L28-L43\n")),(0,r.kt)("p",null,"Next, you can use the CLI to query these new methods and validate that they work correctly."),(0,r.kt)("h2",{id:"redeploying-contract"},"Redeploying the contract"),(0,r.kt)("p",null,"Now that you've implemented the necessary logic for ",(0,r.kt)("inlineCode",{parentName:"p"},"nft_tokens_for_owner"),", it's time to build and re-deploy the contract to your account. Using the build script, deploy the contract as you did in the previous tutorials:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn build && near deploy --wasmFile out/main.wasm --accountId $NFT_CONTRACT_ID\n")),(0,r.kt)("p",null,"This should output a warning saying that the account has a deployed contract and will ask if you'd like to proceed. Simply type ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," and hit enter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"This account already has a deployed contract [ AKJK7sCysrWrFZ976YVBnm6yzmJuKLzdAyssfzK9yLsa ]. Do you want to proceed? (y/n)\n")),(0,r.kt)("h2",{id:"enumerating-tokens"},"Enumerating tokens"),(0,r.kt)("p",null,"Once the updated contract has been redeployed, you can test and see if these new functions work as expected."),(0,r.kt)("h3",{id:"nft-tokens"},"NFT tokens"),(0,r.kt)("p",null,"Let's query for a list of non-fungible tokens on the contract. Use the following command to query for the information of up to 50 NFTs starting from the 10th item:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'near view $NFT_CONTRACT_ID nft_tokens \'{"from_index": "10", "limit": 50}\'\n')),(0,r.kt)("p",null,"This command should return an output similar to the following:"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example response: "),(0,r.kt)("p",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"[]\n")))),(0,r.kt)("h3",{id:"tokens-by-owner"},"Tokens by owner"),(0,r.kt)("p",null,"To get the total supply of NFTs owned by the ",(0,r.kt)("inlineCode",{parentName:"p"},"goteam.testnet")," account, call the ",(0,r.kt)("inlineCode",{parentName:"p"},"nft_supply_for_owner")," function and set the ",(0,r.kt)("inlineCode",{parentName:"p"},"account_id")," parameter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'near view $NFT_CONTRACT_ID nft_supply_for_owner \'{"account_id": "goteam.testnet"}\'\n')),(0,r.kt)("p",null,"This should return an output similar to the following:"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example response: "),(0,r.kt)("p",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"0\n")))),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"In this tutorial, you have added two ",(0,r.kt)("a",{parentName:"p",href:"/tutorials/nfts/enumeration#modifications-to-the-contract"},"new enumeration functions"),", and now you have a basic NFT smart contract with minting and enumeration methods in place. After implementing these modifications, you redeployed the smart contract and tested the functions using the CLI."),(0,r.kt)("p",null,"In the ",(0,r.kt)("a",{parentName:"p",href:"/tutorials/nfts/core"},"next tutorial"),", you'll implement the core functions needed to allow users to transfer the minted tokens."),(0,r.kt)("admonition",{title:"Remember",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you want to see the finished code from this tutorial, you can checkout the ",(0,r.kt)("inlineCode",{parentName:"p"},"3.enumeration")," branch. ")))}m.isMDXComponent=!0}}]);