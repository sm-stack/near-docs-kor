"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[316],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,f=u["".concat(c,".").concat(m)]||u[m]||p[m]||o;return n?a.createElement(f,s(s({ref:t},d),{},{components:n})):a.createElement(f,s({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},77523:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),s=["components"],i={sidebar_position:4},c="Payable Methods",l={unversionedId:"sdk/rust/contract-interface/payable-methods",id:"sdk/rust/contract-interface/payable-methods",title:"Payable Methods",description:"We can allow methods to accept token transfer together with the function call. This is done so that contracts can define a fee in tokens that needs to be paid when they are used. By default the methods are not payable and they will panic if someone will attempt to transfer tokens to them during the invocation. This is done for safety reason, in case someone accidentally transfers tokens during the function call.",source:"@site/../docs/sdk/rust/contract-interface/payable-methods.md",sourceDirName:"sdk/rust/contract-interface",slug:"/sdk/rust/contract-interface/payable-methods",permalink:"/near-docs-kor/vi/sdk/rust/contract-interface/payable-methods",draft:!1,editUrl:"https://github.com/near/docs/edit/master/website/../docs/sdk/rust/contract-interface/payable-methods.md",tags:[],version:"current",lastUpdatedBy:"[sm-stack]",lastUpdatedAt:1675844989,formattedLastUpdatedAt:"8 thg 2, 2023",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"sdk",previous:{title:"Private Methods",permalink:"/near-docs-kor/vi/sdk/rust/contract-interface/private-methods"},next:{title:"Serialization Protocols",permalink:"/near-docs-kor/vi/sdk/rust/contract-interface/serialization-interface"}},d={},p=[],u={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"payable-methods"},"Payable Methods"),(0,o.kt)("p",null,"We can allow methods to accept token transfer together with the function call. This is done so that contracts can define a fee in tokens that needs to be paid when they are used. By default the methods are not payable and they will panic if someone will attempt to transfer tokens to them during the invocation. This is done for safety reason, in case someone accidentally transfers tokens during the function call."),(0,o.kt)("p",null,"To declare a method as payable, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"#[payable]")," annotation within the ",(0,o.kt)("a",{parentName:"p",href:"/near-docs-kor/vi/sdk/rust/contract-structure/near-bindgen"},(0,o.kt)("inlineCode",{parentName:"a"},"near_bindgen")," macro")," as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#[payable]\npub fn my_method(&mut self) {\n...\n}\n")),(0,o.kt)("p",null,"This will allow the ",(0,o.kt)("inlineCode",{parentName:"p"},"my_method")," function to be called and transfer balance to the contract."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#[near_bindgen]\nimpl Contract {\n    #[payable]\n    pub fn take_my_money(&mut self) {\n        near_sdk::env::log_str("Thanks!");\n    }\n    pub fn do_not_take_my_money(&mut self) {\n        near_sdk::env::log_str("Thanks!");\n    }\n}\n')),(0,o.kt)("p",null,"is equivalent to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#[near_bindgen]\nimpl Contract {\n    pub fn take_my_money(&mut self) {\n        near_sdk::env::log_str("Thanks!");\n    }\n    pub fn do_not_take_my_money(&mut self) {\n        if near_sdk::env::attached_deposit() != 0 {\n            near_sdk::env::panic_str("Method do_not_take_my_money doesn\'t accept deposit");\n        }\n        near_sdk::env::log_str("Thanks!");\n    }\n}\n')))}m.isMDXComponent=!0}}]);