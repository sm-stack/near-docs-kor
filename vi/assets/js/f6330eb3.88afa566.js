"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1952],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),k=p(n),d=r,m=k["".concat(c,".").concat(d)]||k[d]||u[d]||i;return n?a.createElement(m,o(o({ref:t},s),{},{components:n})):a.createElement(m,o({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=k;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},73047:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>d,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],l={id:"implicit-accounts",title:"Implicit Accounts",sidebar_label:"Implicit Accounts"},c=void 0,p={unversionedId:"integrator/implicit-accounts",id:"integrator/implicit-accounts",title:"Implicit Accounts",description:"Background",source:"@site/../docs/6.integrator/implicit-accounts.md",sourceDirName:"6.integrator",slug:"/integrator/implicit-accounts",permalink:"/near-docs-kor/vi/integrator/implicit-accounts",draft:!1,editUrl:"https://github.com/near/docs/edit/master/website/../docs/6.integrator/implicit-accounts.md",tags:[],version:"current",lastUpdatedBy:"[sm-stack]",lastUpdatedAt:1675844989,formattedLastUpdatedAt:"8 thg 2, 2023",frontMatter:{id:"implicit-accounts",title:"Implicit Accounts",sidebar_label:"Implicit Accounts"},sidebar:"integrate",previous:{title:"Fungible Tokens",permalink:"/near-docs-kor/vi/integrator/fungible-tokens"},next:{title:"Introduction",permalink:"/near-docs-kor/vi/integrator/errors/introduction"}},s={},u=[{value:"Background",id:"background",level:2},{value:"Specifications",id:"specifications",level:2},{value:"Creating an account locally",id:"creating-an-account-locally",level:2},{value:"Set <code>betanet</code> network",id:"set-betanet-network",level:3},{value:"Generating a key-pair first",id:"generating-a-key-pair-first",level:3},{value:"Viewing the key-pair",id:"viewing-the-key-pair",level:3},{value:"Converting a public key to an account ID.",id:"converting-a-public-key-to-an-account-id",level:3},{value:"Moving the temporary key-pair",id:"moving-the-temporary-key-pair",level:3},{value:"Transferring to the implicit account",id:"transferring-to-the-implicit-account",level:2},{value:"BONUS: Converting public key using python (for learning purposes)",id:"bonus-converting-public-key-using-python-for-learning-purposes",level:2}],k={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"background"},"Background"),(0,i.kt)("p",null,"Implicit accounts work similarly to Bitcoin/Ethereum accounts."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"They allow you to reserve an account ID before it's created by generating a ED25519 key-pair locally."),(0,i.kt)("li",{parentName:"ul"},"This key-pair has a public key that maps to the account ID."),(0,i.kt)("li",{parentName:"ul"},"The account ID is a lowercase hex representation of the public key."),(0,i.kt)("li",{parentName:"ul"},"An ED25519 Public key contains 32 bytes that maps to 64 characters account ID."),(0,i.kt)("li",{parentName:"ul"},"The corresponding secret key allows you to sign transactions on behalf of this account once it's created on chain.")),(0,i.kt)("h2",{id:"specifications"},(0,i.kt)("a",{parentName:"h2",href:"https://nomicon.io/DataStructures/Account.html#implicit-account-ids"},"Specifications")),(0,i.kt)("h2",{id:"creating-an-account-locally"},"Creating an account locally"),(0,i.kt)("p",null,"For a purpose of this demo, we'll use the ",(0,i.kt)("inlineCode",{parentName:"p"},"betanet")," network. "),(0,i.kt)("h3",{id:"set-betanet-network"},"Set ",(0,i.kt)("inlineCode",{parentName:"h3"},"betanet")," network"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"export NEAR_ENV=betanet\n")),(0,i.kt)("h3",{id:"generating-a-key-pair-first"},"Generating a key-pair first"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"near generate-key tmp1\n")),(0,i.kt)("p",null,"Example Output"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Generated key pair with ed25519:BGCCDDHfysuuVnaNVtEhhqeT4k9Muyem3Kpgq2U1m9HX public key\n")),(0,i.kt)("p",null,"It generates a key-pair for ",(0,i.kt)("inlineCode",{parentName:"p"},"tmp1")," account ID. The new public key is ",(0,i.kt)("inlineCode",{parentName:"p"},"ed25519:BGCCDDHfysuuVnaNVtEhhqeT4k9Muyem3Kpgq2U1m9HX"),"."),(0,i.kt)("p",null,"NEAR's string representation of a public key is ",(0,i.kt)("inlineCode",{parentName:"p"},"<curve>:<data>"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Curve is either ",(0,i.kt)("inlineCode",{parentName:"li"},"ed25519")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"secp256k1"),". For implicit accounts we only support ",(0,i.kt)("inlineCode",{parentName:"li"},"ed25519"),"."),(0,i.kt)("li",{parentName:"ul"},"Data is a base58 encoding of the public key. For ",(0,i.kt)("inlineCode",{parentName:"li"},"ed25519")," it contains 32 bytes.")),(0,i.kt)("p",null,"This command generated a key-pair locally and stored it locally at:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"~/.near-credentials/betanet/tmp1.json\n")),(0,i.kt)("h3",{id:"viewing-the-key-pair"},"Viewing the key-pair"),(0,i.kt)("p",null,"Run this command to print the content of the key-pair file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cat ~/.near-credentials/betanet/tmp1.json\n")),(0,i.kt)("p",null,"Content:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{"account_id":"tmp1","public_key":"ed25519:BGCCDDHfysuuVnaNVtEhhqeT4k9Muyem3Kpgq2U1m9HX","private_key":"ed25519:4qAABW9HfVW4UNQjuQAaAWpB21jqoP58kGqDia18FZDRat6Lg6TLWdAD9FyvAd3PPQLYF4hhx2mZAotJudVjoqfs"}\n')),(0,i.kt)("p",null,"As you can see, it's a valid json-file and public key matches the one we generated.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"private_key")," is a secret/private key of the key pair that can be used to sign transactions with the corresponding public key."),(0,i.kt)("h3",{id:"converting-a-public-key-to-an-account-id"},"Converting a public key to an account ID."),(0,i.kt)("p",null,"Let's convert a public key from NEAR string representation ",(0,i.kt)("inlineCode",{parentName:"p"},"ed25519:BGCCDDHfysuuVnaNVtEhhqeT4k9Muyem3Kpgq2U1m9HX")),(0,i.kt)("p",null,"The easiest way is to use ",(0,i.kt)("inlineCode",{parentName:"p"},"near-cli")," with interactive console ",(0,i.kt)("inlineCode",{parentName:"p"},"repl")),(0,i.kt)("p",null,"1) Start ",(0,i.kt)("inlineCode",{parentName:"p"},"near repl"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"near repl\n")),(0,i.kt)("p",null,"2) Store your base58 public key to a local constant:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const pk58 = 'ed25519:BGCCDDHfysuuVnaNVtEhhqeT4k9Muyem3Kpgq2U1m9HX'\n")),(0,i.kt)("p",null,"3) Now let's parse the public key and convert it to the hex in one line:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"nearAPI.utils.PublicKey.fromString(pk58).data.toString('hex')\n")),(0,i.kt)("p",null,"The output string is the account ID in hex (without ",(0,i.kt)("inlineCode",{parentName:"p"},"'"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"'98793cd91a3f870fb126f66285808c7e094afcfc4eda8a970f6648cdf0dbd6de'\n")),(0,i.kt)("p",null,"Now the new account ID is ",(0,i.kt)("inlineCode",{parentName:"p"},"98793cd91a3f870fb126f66285808c7e094afcfc4eda8a970f6648cdf0dbd6de"),"."),(0,i.kt)("p",null,"4) We can now give this account ID to someone and ask them to transfer tokens."),(0,i.kt)("h3",{id:"moving-the-temporary-key-pair"},"Moving the temporary key-pair"),(0,i.kt)("p",null,"Finally, we need to move ",(0,i.kt)("inlineCode",{parentName:"p"},"tmp1.json")," key-pair to the real account ID, so that ",(0,i.kt)("inlineCode",{parentName:"p"},"near-cli")," can use it to sign transactions."),(0,i.kt)("p",null,"Let's first export our account ID to a bash env variable:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'export ACCOUNT="98793cd91a3f870fb126f66285808c7e094afcfc4eda8a970f6648cdf0dbd6de"\n')),(0,i.kt)("p",null,"Now we can move the ",(0,i.kt)("inlineCode",{parentName:"p"},"tmp1.json")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mv ~/.near-credentials/betanet/tmp1.json ~/.near-credentials/betanet/$ACCOUNT.json\n")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"NOTE: While ",(0,i.kt)("inlineCode",{parentName:"em"},".json")," key-pair file still contains the ",(0,i.kt)("inlineCode",{parentName:"em"},'"account_id":"tmp1"'),", it's okay. Because ",(0,i.kt)("inlineCode",{parentName:"em"},"near-cli")," doesn't care.")),(0,i.kt)("p",null,"Assuming you've received tokens on your new account, you can transfer from it using the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"near $ACCOUNT <receiver> <amount>\n")),(0,i.kt)("p",null,"You can also replace ",(0,i.kt)("inlineCode",{parentName:"p"},"$ACCOUNT")," with your actual account ID, e.g."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"near send 98793cd91a3f870fb126f66285808c7e094afcfc4eda8a970f6648cdf0dbd6de <receiver> <amount>\n")),(0,i.kt)("h2",{id:"transferring-to-the-implicit-account"},"Transferring to the implicit account"),(0,i.kt)("p",null,"Let's say someone gives you their account ID ",(0,i.kt)("inlineCode",{parentName:"p"},"0861ea8ddd696525696ccf3148dd706c4fda981c64d8a597490472594400c223"),". You can just transfer to it by running:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"near send <your_account_id> 0861ea8ddd696525696ccf3148dd706c4fda981c64d8a597490472594400c223 <amount>\n")),(0,i.kt)("h2",{id:"bonus-converting-public-key-using-python-for-learning-purposes"},"BONUS: Converting public key using python (for learning purposes)"),(0,i.kt)("p",null,"For this flow we'll use ",(0,i.kt)("inlineCode",{parentName:"p"},"python3")," (with version ",(0,i.kt)("inlineCode",{parentName:"p"},"3.5+"),") with ",(0,i.kt)("inlineCode",{parentName:"p"},"base58")," library."),(0,i.kt)("p",null,"You can install this library with ",(0,i.kt)("inlineCode",{parentName:"p"},"pip3"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pip3 install --user base58\n")),(0,i.kt)("p",null,"Start python3 interpreter:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"python3\n")),(0,i.kt)("p",null,"The first thing is to get the data part from the public key (without ",(0,i.kt)("inlineCode",{parentName:"p"},"ed25519:")," prefix). Let's store it in a variable ",(0,i.kt)("inlineCode",{parentName:"p"},"pk58"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"pk58 = 'BGCCDDHfysuuVnaNVtEhhqeT4k9Muyem3Kpgq2U1m9HX'\n")),(0,i.kt)("p",null,"Now let's import base58:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import base58\n")),(0,i.kt)("p",null,"Finally, let's convert our base58 public key representation to bytes and then to hex:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"base58.b58decode(pk58).hex()\n")),(0,i.kt)("p",null,"Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"'98793cd91a3f870fb126f66285808c7e094afcfc4eda8a970f6648cdf0dbd6de'\n")),(0,i.kt)("p",null,"This gives us the same account ID as ",(0,i.kt)("inlineCode",{parentName:"p"},"near-cli"),", so this is encouraging."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note:")," The default network for ",(0,i.kt)("inlineCode",{parentName:"p"},"near-cli")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"testnet"),". If you would like to change this to ",(0,i.kt)("inlineCode",{parentName:"p"},"mainnet")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"betanet"),", please see ",(0,i.kt)("a",{parentName:"p",href:"/tools/near-cli#network-selection"},(0,i.kt)("inlineCode",{parentName:"a"},"near-cli")," network selection")," for instructions."),(0,i.kt)("admonition",{title:"Got a question?",type:"tip"},(0,i.kt)("a",{href:"https://stackoverflow.com/questions/tagged/nearprotocol"},(0,i.kt)("h8",null,"Ask it on StackOverflow!"))))}d.isMDXComponent=!0}}]);