"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4438],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),f=r,h=d["".concat(s,".").concat(f)]||d[f]||p[f]||o;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},47623:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>f,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),i=["components"],l={id:"transfers",title:"Transferring Fungible Tokens",sidebar_label:"Transferring FTs"},s=void 0,c={unversionedId:"tutorials/fts/transfers",id:"tutorials/fts/transfers",title:"Transferring Fungible Tokens",description:"In this tutorial, you'll learn how to implement the core standards into your smart contract. You'll implement the logic that allows you to transfer and receive tokens. If you're joining us for the first time, feel free to clone this repository and follow along in the 4.storage folder.",source:"@site/../docs/3.tutorials/fts/5.transfers.md",sourceDirName:"3.tutorials/fts",slug:"/tutorials/fts/transfers",permalink:"/near-docs-kor/vi/tutorials/fts/transfers",draft:!1,editUrl:"https://github.com/near/docs/edit/master/website/../docs/3.tutorials/fts/5.transfers.md",tags:[],version:"current",lastUpdatedBy:"[sm-stack]",lastUpdatedAt:1675844989,formattedLastUpdatedAt:"8 thg 2, 2023",sidebarPosition:5,frontMatter:{id:"transfers",title:"Transferring Fungible Tokens",sidebar_label:"Transferring FTs"},sidebar:"tutorials",previous:{title:"Registering Accounts",permalink:"/near-docs-kor/vi/tutorials/fts/registering-accounts"},next:{title:"Adding FTs to a Marketplace",permalink:"/near-docs-kor/vi/tutorials/fts/marketplace"}},u={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Modifications to the contract",id:"modifications-to-the-contract",level:2},{value:"Transfer function",id:"transfer-function",level:3},{value:"Internal helper functions",id:"internal-helper-functions",level:3},{value:"Transfer call function",id:"transfer-call-function",level:3},{value:"Deploying the contract",id:"redeploying-contract",level:2},{value:"Creating a sub-account",id:"creating-a-sub-account",level:3},{value:"Initialization",id:"initialization",level:3},{value:"Testing the transfer function",id:"testing-the-transfer-function",level:3},{value:"Testing the transfer call function",id:"testing-the-transfer-call-function",level:3},{value:"Conclusion",id:"conclusion",level:2}],d={toc:p};function f(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In this tutorial, you'll learn how to implement the ",(0,o.kt)("a",{parentName:"p",href:"https://nomicon.io/Standards/Tokens/FungibleToken/Core"},"core standards")," into your smart contract. You'll implement the logic that allows you to transfer and receive tokens. If you're joining us for the first time, feel free to clone ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/near-examples/ft-tutorial"},"this repository")," and follow along in the ",(0,o.kt)("inlineCode",{parentName:"p"},"4.storage")," folder."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If you wish to see the finished code for this ",(0,o.kt)("em",{parentName:"p"},"Core")," tutorial, you can find it in the ",(0,o.kt)("inlineCode",{parentName:"p"},"5.transfers")," folder.")),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"Up until this point, you've created a simple FT smart contract that allows the owner to mint a total supply of tokens and view information about the Fungible Token itself. In addition, you've added the functionality to register accounts and emit events. Today, you'll expand your smart contract to allow for users to transfer and receive fungible tokens."),(0,o.kt)("p",null,"The logic for doing a simple transfer is quite easy to understand. Let's say Benji wants to transfer Mike 100 of his fungible tokens. The contract should do a few things:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Check if Benji owns at least 100 tokens."),(0,o.kt)("li",{parentName:"ul"},"Make sure Benji is calling the function."),(0,o.kt)("li",{parentName:"ul"},"Ensure Mike is registered on the contract."),(0,o.kt)("li",{parentName:"ul"},"Take 100 tokens out of Benji's account."),(0,o.kt)("li",{parentName:"ul"},"Put 100 tokens into Mike's account.")),(0,o.kt)("p",null,"At this point, you're ready to move on and make the necessary modifications to your smart contract."),(0,o.kt)("h2",{id:"modifications-to-the-contract"},"Modifications to the contract"),(0,o.kt)("p",null,"Let's start our journey in the ",(0,o.kt)("inlineCode",{parentName:"p"},"src/ft_core.rs")," file."),(0,o.kt)("h3",{id:"transfer-function"},"Transfer function"),(0,o.kt)("p",null,"You'll start by implementing the ",(0,o.kt)("inlineCode",{parentName:"p"},"ft_transfer")," logic which is found in the ",(0,o.kt)("inlineCode",{parentName:"p"},"src/ft_core.rs")," file. This function will transfer the specified ",(0,o.kt)("inlineCode",{parentName:"p"},"amount")," to the ",(0,o.kt)("inlineCode",{parentName:"p"},"receiver_id")," with an optional ",(0,o.kt)("inlineCode",{parentName:"p"},"memo")," such as ",(0,o.kt)("inlineCode",{parentName:"p"},'"Happy Birthday Mike!"'),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:"reference",reference:!0},"https://github.com/near-examples/ft-tutorial/blob/main/5.transfers/src/ft_core.rs#L60-L72\n")),(0,o.kt)("p",null,"There are a couple things to notice here. "),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"We've introduced a new method called ",(0,o.kt)("inlineCode",{parentName:"p"},"assert_one_yocto()"),". This method will ensure that the user is signing the transaction with a full access key by requiring a deposit of exactly 1 yoctoNEAR, the smallest possible amount of $NEAR that can be transferred. Since the transfer function is potentially transferring very valuable assets, you'll want to make sure that whoever is calling the function has a full access key.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"We've introduced an ",(0,o.kt)("inlineCode",{parentName:"p"},"internal_transfer")," method. This will perform all the logic necessary to transfer the tokens internally."))),(0,o.kt)("h3",{id:"internal-helper-functions"},"Internal helper functions"),(0,o.kt)("p",null,"Let's quickly move over to the ",(0,o.kt)("inlineCode",{parentName:"p"},"ft-contract/src/internal.rs")," file so that you can implement the ",(0,o.kt)("inlineCode",{parentName:"p"},"internal_transfer")," method which is the core of this tutorial. This function will take the following parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"sender_id"),": the account that's attempting to transfer the tokens."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"receiver_id"),": the account that's receiving the tokens."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"amount"),": the amount of FTs being transferred."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"memo"),": an optional memo to include.")),(0,o.kt)("p",null,"The first thing you'll want to do is make sure the sender isn't sending tokens to themselves and that they're sending a positive number. After that, you'll want to withdraw the tokens from the sender's balance and deposit them into the receiver's balance. You've already written the logic to deposit FTs by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"internal_deposit")," function. "),(0,o.kt)("p",null,"Let's use similar logic to implement ",(0,o.kt)("inlineCode",{parentName:"p"},"internal_withdraw"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:"reference",reference:!0},"https://github.com/near-examples/ft-tutorial/blob/main/5.transfers/src/internal.rs#L29-L40\n")),(0,o.kt)("p",null,"In this case, the contract will get the account's balance and ensure they are registered by calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"internal_unwrap_balance_of")," function. It will then subtract the amount from the user's balance and re-insert them into the map."),(0,o.kt)("p",null,"Using the ",(0,o.kt)("inlineCode",{parentName:"p"},"internal_deposit")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"internal_withdraw")," functions together, the core of the ",(0,o.kt)("inlineCode",{parentName:"p"},"internal_transfer")," function is complete. "),(0,o.kt)("p",null,"There's only one more thing you need to do. When transferring the tokens, you need to remember to emit a log as per the ",(0,o.kt)("a",{parentName:"p",href:"https://nomicon.io/Standards/Tokens/FungibleToken/Event"},"events")," standard:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:"reference",reference:!0},"https://github.com/near-examples/ft-tutorial/blob/main/5.transfers/src/internal.rs#L42-L67\n")),(0,o.kt)("p",null,"Now that this is finished, the simple transfer case is done! You can now transfer FTs between registered users!"),(0,o.kt)("h3",{id:"transfer-call-function"},"Transfer call function"),(0,o.kt)("p",null,"In this section, you'll learn about a new function ",(0,o.kt)("inlineCode",{parentName:"p"},"ft_transfer_call"),". This will transfer FTs to a receiver and also call a method on the receiver's contract all in the same transaction."),(0,o.kt)("p",null,"Let's consider the following scenario. An account wants to transfer FTs to a smart contract for performing a service. The traditional approach would be to perform the service and then ask for the tokens in two separate transactions. If we introduce a \u201ctransfer and call\u201d workflow baked into a single transaction, the process can be greatly improved:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:"reference",reference:!0},"https://github.com/near-examples/ft-tutorial/blob/main/5.transfers/src/ft_core.rs#L74-L104\n")),(0,o.kt)("p",null,"This function will do several things:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Ensures the caller attached exactly 1 yocto for security purposes. "),(0,o.kt)("li",{parentName:"ol"},"Transfer the tokens using the ",(0,o.kt)("inlineCode",{parentName:"li"},"internal_transfer")," you just wrote."),(0,o.kt)("li",{parentName:"ol"},"Creates a promise to call the method ",(0,o.kt)("inlineCode",{parentName:"li"},"ft_on_transfer")," on the ",(0,o.kt)("inlineCode",{parentName:"li"},"receiver_id"),"'s contract."),(0,o.kt)("li",{parentName:"ol"},"After the promise finishes executing, the function ",(0,o.kt)("inlineCode",{parentName:"li"},"ft_resolve_transfer")," is called. ")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"This is a very common workflow when dealing with cross contract calls. You first initiate the call and wait for it to finish executing. Then, you invoke a function that resolves the result of the promise and act accordingly. "),(0,o.kt)("p",{parentName:"admonition"},"Learn more ",(0,o.kt)("a",{parentName:"p",href:"/near-docs-kor/vi/develop/contracts/crosscontract"},"here"),".")),(0,o.kt)("p",null,"When calling ",(0,o.kt)("inlineCode",{parentName:"p"},"ft_on_transfer"),", it will return how many tokens the contract should refund the original sender. "),(0,o.kt)("p",null,"This is important for a couple of reasons:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"If you send the receiver too many FTs and their contract wants to refund the excess."),(0,o.kt)("li",{parentName:"ol"},"If any of the logic panics, all of the tokens should be refunded back to the sender. ")),(0,o.kt)("p",null,"This logic will all happen in the ",(0,o.kt)("inlineCode",{parentName:"p"},"ft_resolve_transfer")," function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:"reference",reference:!0},"https://github.com/near-examples/ft-tutorial/blob/main/5.transfers/src/ft_core.rs#L174-L221\n")),(0,o.kt)("p",null,"The first thing you'll do is check the status of the promise. If anything failed, you'll refund the sender for the full amount of tokens. If the promise succeeded, you'll extract the amount of tokens to refund the sender based on the value returned from ",(0,o.kt)("inlineCode",{parentName:"p"},"ft_on_transfer"),". Once you have the amount needed to be refunded, you'll perform the actual refund logic by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"internal_transfer")," function you wrote previously."),(0,o.kt)("p",null,"You'll then return the net amount of tokens that were transferred to the receiver. If the sender transferred 100 tokens but 20 were refunded, this function should return 80."),(0,o.kt)("p",null,"With that finished, you've now successfully added the necessary logic to allow users to transfer FTs. It's now time to deploy and do some testing."),(0,o.kt)("h2",{id:"redeploying-contract"},"Deploying the contract"),(0,o.kt)("p",null,"Let's create a new sub-account to deploy the contract to. Since these changes are only additive and non state breaking, you could have deployed a patch fix to the contract you deployed in the storage section as well. To learn more about upgrading contracts, see the ",(0,o.kt)("a",{parentName:"p",href:"/tutorials/nfts/upgrade-contract"},"upgrading a contract")," section in the NFT Zero to Hero tutorial."),(0,o.kt)("h3",{id:"creating-a-sub-account"},"Creating a sub-account"),(0,o.kt)("p",null,"Run the following command to create a sub-account ",(0,o.kt)("inlineCode",{parentName:"p"},"transfer")," of your main account with an initial balance of 25 NEAR which will be transferred from the original to your new account."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"near create-account transfer.$FT_CONTRACT_ID --masterAccount $FT_CONTRACT_ID --initialBalance 25\n")),(0,o.kt)("p",null,"Next, you'll want to export an environment variable for ease of development:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"export TRANSFER_FT_CONTRACT_ID=transfer.$FT_CONTRACT_ID\n")),(0,o.kt)("p",null,"Using the build script, build the deploy the contract as you did in the previous tutorials:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd 1.skeleton && ./build.sh && cd .. && near deploy --wasmFile out/contract.wasm --accountId $TRANSFER_FT_CONTRACT_ID\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If you haven't completed the previous tutorials and are just following along with this one, simply create an account and login with your CLI using ",(0,o.kt)("inlineCode",{parentName:"p"},"near login"),". You can then export an environment variable ",(0,o.kt)("inlineCode",{parentName:"p"},"export TRANSFER_FT_CONTRACT_ID=YOUR_ACCOUNT_ID_HERE"),". In addition, you can find the contract code by going to the ",(0,o.kt)("inlineCode",{parentName:"p"},"5.transfers")," folder. Instead of building using ",(0,o.kt)("inlineCode",{parentName:"p"},"1.skeleton"),", you can build by going to the ",(0,o.kt)("inlineCode",{parentName:"p"},"5.transfers")," folder and running ",(0,o.kt)("inlineCode",{parentName:"p"},"./build.sh"),".")),(0,o.kt)("h3",{id:"initialization"},"Initialization"),(0,o.kt)("p",null,"Now that the contract is deployed, it's time to initialize it and mint the total supply. Let's once again create an initial supply of 1000 ",(0,o.kt)("inlineCode",{parentName:"p"},"gtNEAR"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'near call $TRANSFER_FT_CONTRACT_ID new_default_meta \'{"owner_id": "\'$TRANSFER_FT_CONTRACT_ID\'", "total_supply": "1000000000000000000000000000"}\' --accountId $TRANSFER_FT_CONTRACT_ID\n')),(0,o.kt)("p",null,"You can check if you own the FTs by running the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"near view $TRANSFER_FT_CONTRACT_ID ft_balance_of '{\"account_id\": \"'$TRANSFER_FT_CONTRACT_ID'\"}'\n")),(0,o.kt)("h3",{id:"testing-the-transfer-function"},"Testing the transfer function"),(0,o.kt)("p",null,"Let's test the transfer function by transferring 1 ",(0,o.kt)("inlineCode",{parentName:"p"},"gtNEAR")," from the owner account to the the account ",(0,o.kt)("inlineCode",{parentName:"p"},"benjiman.testnet")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The FTs won't be recoverable unless the account ",(0,o.kt)("inlineCode",{parentName:"p"},"benjiman.testnet")," transfers them back to you. If you don't want your FTs lost, make a new account and transfer the token to that account instead.")),(0,o.kt)("p",null,"You'll first need to register the account ",(0,o.kt)("inlineCode",{parentName:"p"},"benjiman.testnet")," by running the following command."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'near call $TRANSFER_FT_CONTRACT_ID storage_deposit \'{"account_id": "benjiman.testnet"}\' --accountId $TRANSFER_FT_CONTRACT_ID --amount 0.01\n')),(0,o.kt)("p",null,"Once the account is registered, you can transfer the FTs by running the following command. Take note that you're also attaching exactly 1 yoctoNEAR by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"--depositYocto")," flag. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'near call $TRANSFER_FT_CONTRACT_ID ft_transfer \'{"receiver_id": "benjiman.testnet", "amount": "1000000000000000000000000", "memo": "Go Team :)"}\' --accountId $TRANSFER_FT_CONTRACT_ID --depositYocto 1\n')),(0,o.kt)("p",null,"You should see the ",(0,o.kt)("inlineCode",{parentName:"p"},"FtTransferEvent")," being emitted in the console. At this point, if you check for the total supply, it should still be 1000 ",(0,o.kt)("inlineCode",{parentName:"p"},"gtNEAR")," but if you check both the balance of Benji and the balance of the owner, they should reflect the transfer."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"near view $TRANSFER_FT_CONTRACT_ID ft_balance_of '{\"account_id\": \"'$TRANSFER_FT_CONTRACT_ID'\"}'\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'near view $TRANSFER_FT_CONTRACT_ID ft_balance_of \'{"account_id": "benjiman.testnet"}\'\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"near view $TRANSFER_FT_CONTRACT_ID ft_total_supply\n")),(0,o.kt)("h3",{id:"testing-the-transfer-call-function"},"Testing the transfer call function"),(0,o.kt)("p",null,"Now that you've tested the ",(0,o.kt)("inlineCode",{parentName:"p"},"ft_transfer")," function, it's time to test the ",(0,o.kt)("inlineCode",{parentName:"p"},"ft_transfer_call")," function. If you try to transfer tokens to a receiver that does ",(0,o.kt)("strong",{parentName:"p"},"not")," implement the ",(0,o.kt)("inlineCode",{parentName:"p"},"ft_on_transfer")," function, the contract will panic and the FTs will be ",(0,o.kt)("strong",{parentName:"p"},"refunded"),". Let's test this functionality below."),(0,o.kt)("p",null,"You can try to transfer the FTs to the account ",(0,o.kt)("inlineCode",{parentName:"p"},"no-contract.testnet")," which, as the name suggests, doesn't have a contract. This means that the receiver doesn't implement the ",(0,o.kt)("inlineCode",{parentName:"p"},"ft_on_transfer")," function and the FTs should remain yours after the transaction is complete. You'll first have to register the account, however."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'near call $TRANSFER_FT_CONTRACT_ID storage_deposit \'{"account_id": "no-contract.testnet"}\' --accountId $TRANSFER_FT_CONTRACT_ID --amount 0.01\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'near call $TRANSFER_FT_CONTRACT_ID ft_transfer_call \'{"receiver_id": "no-contract.testnet", "amount": "1000000000000000000000000", "msg": "foo"}\' --accountId $TRANSFER_FT_CONTRACT_ID --depositYocto 1 --gas 200000000000000\n')),(0,o.kt)("p",null,"The output response should be as follows."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'Scheduling a call: transfer.dev-1660680326316-91393402417293.ft_transfer_call({"receiver_id": "no-contract.testnet", "amount": "1000000000000000000000000", "msg": "foo"}) with attached 0.000000000000000000000001 NEAR\nDoing account.functionCall()\nReceipts: AJ3yWv7tSiZRLtoTkyTgfdzmQP1dpjX9DxJDiD33uwTZ, EKtpDFoJWNnbyxJ7SriAFQYX8XV9ZTzwmCF2qhSaYMAc, 21UzDZ791pWZRKAHv8WaRKN8mqDVrz8zewLWGTNZTckh\n    Log [transfer.dev-1660680326316-91393402417293]: EVENT_JSON:{"standard":"nep141","version":"1.0.0","event":"ft_transfer","data":[{"old_owner_id":"transfer.dev-1660680326316-91393402417293","new_owner_id":"no-contract.testnet","amount":"1000000000000000000000000"}]}\nReceipt: 5N2WV8picxwUNC5TYa3A3v4qGquQAhkU6P81tgRt1UFN\n    Failure [transfer.dev-1660680326316-91393402417293]: Error: Cannot find contract code for account no-contract.testnet\nReceipt: AdT1bSZNCu9ACq7m6ynb12GgSb3zBenfzvvzRwfYPBmg\n    Log [transfer.dev-1660680326316-91393402417293]: EVENT_JSON:{"standard":"nep141","version":"1.0.0","event":"ft_transfer","data":[{"old_owner_id":"no-contract.testnet","new_owner_id":"transfer.dev-1660680326316-91393402417293","amount":"1000000000000000000000000","memo":"Refund"}]}\nTransaction Id 2XVy8MZU8TWreW8C9zK6HSyBsxE5hyTbyUyxNdncxL8g\nTo see the transaction in the transaction explorer, please open this url in your browser\nhttps://explorer.testnet.near.org/transactions/2XVy8MZU8TWreW8C9zK6HSyBsxE5hyTbyUyxNdncxL8g\n\'0\'\n')),(0,o.kt)("p",null,"There should be a transfer event emitted for the initial transfer of tokens and then also for the refund. In addition, ",(0,o.kt)("inlineCode",{parentName:"p"},"0")," should have been returned from the function because the sender ended up transferring net 0 tokens to the receiver since all the tokens were refunded."),(0,o.kt)("p",null,"If you query for the balance of ",(0,o.kt)("inlineCode",{parentName:"p"},"no-contract.testnet"),", it should still be 0."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'near view $TRANSFER_FT_CONTRACT_ID ft_balance_of \'{"account_id": "no-contract.testnet"}\'\n')),(0,o.kt)("p",null,"Hurray! At this point, your FT contract is fully complete and all the functionality is working as expected. Go forth and experiment! The world is your oyster and don't forget, go team!"),(0,o.kt)("h2",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"In this tutorial, you learned how to expand a FT contract by adding ways for users to transfer FTs. You ",(0,o.kt)("a",{parentName:"p",href:"#introduction"},"broke down")," the problem into smaller, more digestible subtasks and took that information and implemented both the ",(0,o.kt)("a",{parentName:"p",href:"#transfer-function"},"FT transfer")," and ",(0,o.kt)("a",{parentName:"p",href:"#transfer-call-function"},"FT transfer call")," functions. In addition, you deployed another ",(0,o.kt)("a",{parentName:"p",href:"#redeploying-contract"},"contract")," and ",(0,o.kt)("a",{parentName:"p",href:"#testing-changes"},"tested")," the transfer functionality."),(0,o.kt)("p",null,"In the ",(0,o.kt)("a",{parentName:"p",href:"/tutorials/fts/marketplace"},"next tutorial"),", you'll learn about how an NFT marketplace can operate to purchase NFTs by using Fungible Tokens."))}f.isMDXComponent=!0}}]);