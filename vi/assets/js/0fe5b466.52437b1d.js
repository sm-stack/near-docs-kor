"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8114],{90346:(e,t,a)=>{a.d(t,{Ey:()=>d,O2:()=>p,SQ:()=>m});var n=a(67294),r=a(65488),l=a(85162),i=a(1841),s=a.n(i),o=a(95665),u=a.n(o);function p(e){var t=e.children;return Array.isArray(t)||(t=[t]),n.createElement(r.Z,{className:"language-tabs",groupId:"code-tabs"},t.map((function(e,t){return n.createElement(l.Z,{value:e.props.value,label:e.props.value},e)})))}function m(e){var t=e.children,a=e.language;return Array.isArray(t)||(t=[t]),t=t.map((function(e){return function(e,t){var a=e.props,r=a.children,l=a.url,i=a.start,o=a.end,u=a.fname;if("Github"==e.props.mdxType)return d({url:l,start:i,end:o,language:t,fname:u});if("CodeBlock"==e.props.mdxType)return n.createElement(s(),{fname:u,language:t},r);return e}(e,a)})),1==t.length?n.createElement(l.Z,{value:0,label:t[0].props.fname},t[0]):n.createElement(r.Z,{className:"file-tabs"},t.map((function(e,t){return n.createElement(l.Z,{value:t,label:e.props.fname},e)})))}function d(e){var t=e.url,a=e.start,r=e.end,l=e.language,i=e.fname,s=t+"#";return a&&r&&(s+="L"+a+"-L"+r+"#"),n.createElement(u(),{language:l,fname:i},s)}},85162:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(67294),r=a(86010);const l="tabItem_Ymn6";function i(e){var t=e.children,a=e.hidden,i=e.className;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,i),hidden:a},t)}},65488:(e,t,a)=>{a.d(t,{Z:()=>c});var n=a(87462),r=a(67294),l=a(86010),i=a(72389),s=a(67392),o=a(7094),u=a(12466);const p="tabList__CuJ",m="tabItem_LNqP";function d(e){var t,a,i=e.lazy,d=e.block,c=e.defaultValue,h=e.values,g=e.groupId,f=e.className,v=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=h?h:v.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),b=(0,s.l)(k,(function(e,t){return e.value===t.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===c?c:null!=(t=null!=c?c:null==(a=v.find((function(e){return e.props.default})))?void 0:a.props.value)?t:v[0].props.value;if(null!==y&&!k.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var x=(0,o.U)(),N=x.tabGroupChoices,w=x.setTabGroupChoices,T=(0,r.useState)(y),S=T[0],E=T[1],C=[],M=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=g){var U=N[g];null!=U&&U!==S&&k.some((function(e){return e.value===U}))&&E(U)}var Z=function(e){var t=e.currentTarget,a=C.indexOf(t),n=k[a].value;n!==S&&(M(t),E(n),null!=g&&w(g,String(n)))},A=function(e){var t,a=null;switch(e.key){case"ArrowRight":var n,r=C.indexOf(e.currentTarget)+1;a=null!=(n=C[r])?n:C[0];break;case"ArrowLeft":var l,i=C.indexOf(e.currentTarget)-1;a=null!=(l=C[i])?l:C[C.length-1]}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":d},f)},k.map((function(e){var t=e.value,a=e.label,i=e.attributes;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:S===t?0:-1,"aria-selected":S===t,key:t,ref:function(e){return C.push(e)},onKeyDown:A,onFocus:Z,onClick:Z},i,{className:(0,l.Z)("tabs__item",m,null==i?void 0:i.className,{"tabs__item--active":S===t})}),null!=a?a:t)}))),i?(0,r.cloneElement)(v.filter((function(e){return e.props.value===S}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},v.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==S})}))))}function c(e){var t=(0,i.Z)();return r.createElement(d,(0,n.Z)({key:String(t)},e))}},24913:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>u,default:()=>h,frontMatter:()=>o,metadata:()=>p,toc:()=>d});var n=a(87462),r=a(63366),l=(a(67294),a(3905)),i=(a(65488),a(85162),a(90346)),s=["components"],o={id:"update-contract-migrate-state",title:"Self Upgrade & State Migration"},u=void 0,p={unversionedId:"tutorials/examples/update-contract-migrate-state",id:"tutorials/examples/update-contract-migrate-state",title:"Self Upgrade & State Migration",description:"",source:"@site/../docs/3.tutorials/examples/update.md",sourceDirName:"3.tutorials/examples",slug:"/tutorials/examples/update-contract-migrate-state",permalink:"/near-docs-kor/vi/tutorials/examples/update-contract-migrate-state",draft:!1,editUrl:"https://github.com/near/docs/edit/master/website/../docs/3.tutorials/examples/update.md",tags:[],version:"current",lastUpdatedBy:"[sm-stack]",lastUpdatedAt:1675844989,formattedLastUpdatedAt:"8 thg 2, 2023",frontMatter:{id:"update-contract-migrate-state",title:"Self Upgrade & State Migration"},sidebar:"tutorials",previous:{title:"Complex Cross Contract Call",permalink:"/near-docs-kor/vi/tutorials/examples/advanced-xcc"},next:{title:"Fungible Tokens",permalink:"/near-docs-kor/vi/develop/relevant-contracts/ft"}},m={},d=[{value:"State Migration",id:"state-migration",level:2},{value:"The Migration Method",id:"the-migration-method",level:4},{value:"State Versioning",id:"state-versioning",level:2},{value:"Self Update",id:"self-update",level:2}],c={toc:d};function h(e){var t=e.components,a=(0,r.Z)(e,s);return(0,l.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Three examples on how to handle updates and ",(0,l.kt)("a",{parentName:"p",href:"/near-docs-kor/vi/develop/upgrade"},"state migration"),":"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/near-examples/update-migrate-rust/tree/main/contracts/basic-updates"},"State Migration"),": How to implement a ",(0,l.kt)("inlineCode",{parentName:"li"},"migrate")," method to migrate state between contract updates."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/near-examples/update-migrate-rust/tree/main/contracts/enum-updates"},"State Versioning"),": How to use readily use versioning on a state, to simplify updating it later."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/near-examples/update-migrate-rust/tree/main/contracts/self-updates"},"Self Update"),": How to implement a contract that can update itself.")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"state-migration"},"State Migration"),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/near-examples/update-migrate-rust/tree/main/contracts/basic-updates"},"State Migration example")," shows how to handle state-breaking changes\nbetween contract updates."),(0,l.kt)("p",null,"It is composed by 2 contracts:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Base: A Guest Book were people can write messages."),(0,l.kt)("li",{parentName:"ol"},"Update: An update in which we remove a parameter and change the internal structure.")),(0,l.kt)(i.O2,{mdxType:"CodeTabs"},(0,l.kt)(i.SQ,{value:"\ud83e\udd80 Rust",language:"rust",mdxType:"Language"},(0,l.kt)(i.Ey,{fname:"migrate.rs",url:"https://github.com/near-examples/update-migrate-rust/blob/main/contracts/basic-updates/update/src/migrate.rs",start:"20",end:"44",mdxType:"Github"}))),(0,l.kt)("h4",{id:"the-migration-method"},"The Migration Method"),(0,l.kt)("p",null,"The migration method deserializes the current state (",(0,l.kt)("inlineCode",{parentName:"p"},"OldState"),") and iterates through the messages, updating them\nto the new ",(0,l.kt)("inlineCode",{parentName:"p"},"PostedMessage")," that includes the ",(0,l.kt)("inlineCode",{parentName:"p"},"payment")," field."),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Notice that migrate is actually an ",(0,l.kt)("a",{parentName:"p",href:"/near-docs-kor/vi/develop/contracts/anatomy#initialization-method"},"initialization method")," that ignores the existing state (","[#init(ignore_state)]","), thus being able to execute and rewrite the state.")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"state-versioning"},"State Versioning"),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/near-examples/update-migrate-rust/tree/main/contracts/enum-updates"},"State Versioning example")," shows how to use\n",(0,l.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/book/ch06-01-defining-an-enum.html"},"Enums")," to implement state versioning on a contract."),(0,l.kt)("p",null,"Versioning simplifies updating the contract since you only need to add a new new version of the structure.\nAll versions can coexist, thus you will not need to change previously existing structures. "),(0,l.kt)("p",null,"The example is composed by 2 contracts:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Base: The Guest Book contract using versioned ",(0,l.kt)("inlineCode",{parentName:"li"},"PostedMessages")," (",(0,l.kt)("inlineCode",{parentName:"li"},"PostedMessagesV1"),")."),(0,l.kt)("li",{parentName:"ol"},"Update: An update that adds a new version of ",(0,l.kt)("inlineCode",{parentName:"li"},"PostedMessages")," (",(0,l.kt)("inlineCode",{parentName:"li"},"PostedMessagesV2"),").")),(0,l.kt)(i.O2,{mdxType:"CodeTabs"},(0,l.kt)(i.SQ,{value:"\ud83e\udd80 Rust",language:"rust",mdxType:"Language"},(0,l.kt)(i.Ey,{fname:"versioned_msg.rs",url:"https://github.com/near-examples/update-migrate-rust/blob/main/contracts/enum-updates/update/src/versioned_msg.rs",start:"22",end:"40",mdxType:"Github"}))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"self-update"},"Self Update"),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/near-examples/update-migrate-rust/tree/main/contracts/self-updates"},"Self Update example")," shows how to implement a contract\nthat can update itself."),(0,l.kt)("p",null,"It is composed by 2 contracts:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Base: A Guest Book were people can write messages, implementing a ",(0,l.kt)("inlineCode",{parentName:"li"},"update_contract")," method."),(0,l.kt)("li",{parentName:"ol"},"Update: An update in which we remove a parameter and change the internal structure.")),(0,l.kt)(i.O2,{mdxType:"CodeTabs"},(0,l.kt)(i.SQ,{value:"\ud83e\udd80 Rust",language:"rust",mdxType:"Language"},(0,l.kt)(i.Ey,{fname:"update.rs",url:"https://github.com/near-examples/update-migrate-rust/blob/main/contracts/self-updates/base/src/update.rs",start:"10",end:"28",mdxType:"Github"}))))}h.isMDXComponent=!0}}]);