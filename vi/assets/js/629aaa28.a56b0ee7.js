"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1898],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>m});var i=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,i,r=function(t,e){if(null==t)return{};var n,i,r={},o=Object.keys(t);for(i=0;i<o.length;i++)n=o[i],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(i=0;i<o.length;i++)n=o[i],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var l=i.createContext({}),c=function(t){var e=i.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},u=function(t){var e=c(t.components);return i.createElement(l.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return i.createElement(i.Fragment,{},e)}},p=i.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,l=t.parentName,u=s(t,["components","mdxType","originalType","parentName"]),p=c(n),m=r,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return n?i.createElement(h,a(a({ref:e},u),{},{components:n})):i.createElement(h,a({ref:e},u))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,a=new Array(o);a[0]=p;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s.mdxType="string"==typeof t?t:r,a[1]=s;for(var c=2;c<o;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},96515:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var i=n(87462),r=n(63366),o=(n(67294),n(3905)),a=["components"],s={sidebar_position:1},l="Unit Tests",c={unversionedId:"sdk/rust/testing/unit-tests",id:"sdk/rust/testing/unit-tests",title:"Unit Tests",description:"Testing contract functionality can be done through the cargo test framework. These tests will run with a mocked blockchain and will allow testing function calls directly without having to set up/deploy to a network and sign serialized transactions on this network.",source:"@site/../docs/sdk/rust/testing/unit-tests.md",sourceDirName:"sdk/rust/testing",slug:"/sdk/rust/testing/unit-tests",permalink:"/near-docs-kor/vi/sdk/rust/testing/unit-tests",draft:!1,editUrl:"https://github.com/near/docs/edit/master/website/../docs/sdk/rust/testing/unit-tests.md",tags:[],version:"current",lastUpdatedBy:"[sm-stack]",lastUpdatedAt:1675844989,formattedLastUpdatedAt:"8 thg 2, 2023",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"sdk",previous:{title:"Integration Tests",permalink:"/near-docs-kor/vi/sdk/rust/testing/integration-tests"},next:{title:"Best Practices",permalink:"/near-docs-kor/vi/sdk/rust/best-practices"}},u={},d=[],p={toc:d};function m(t){var e=t.components,n=(0,r.Z)(t,a);return(0,o.kt)("wrapper",(0,i.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"unit-tests"},"Unit Tests"),(0,o.kt)("p",null,"Testing contract functionality can be done through the ",(0,o.kt)("inlineCode",{parentName:"p"},"cargo test")," framework. These tests will run with a mocked blockchain and will allow testing function calls directly without having to set up/deploy to a network and sign serialized transactions on this network."),(0,o.kt)("p",null,"A common framework for tests, along with setting up a basic testing environment looks like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#[cfg(all(test, not(target_arch = "wasm32")))]\nmod tests {\n    use super::*;\n    use near_sdk::test_utils::VMContextBuilder;\n    use near_sdk::{testing_env, VMContext};\n\n    fn get_context(is_view: bool) -> VMContext {\n        VMContextBuilder::new()\n            .signer_account_id("bob_near".parse().unwrap())\n            .is_view(is_view)\n            .build()\n    }\n\n    #[test]\n    fn my_test() {\n        let context = get_context(false);\n        testing_env!(context);\n        // ... Write test here\n    }\n}\n')),(0,o.kt)("p",null,"Where ",(0,o.kt)("inlineCode",{parentName:"p"},"VMContextBuilder")," allows for modifying the context of the mocked blockchain to simulate the environment that a transaction would be run. The documentation for what can be modified with this context can be found ",(0,o.kt)("a",{parentName:"p",href:"https://docs.rs/near-sdk/latest/near_sdk/struct.VMContext.html"},"here"),"."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"testing_env!")," macro will initialize the blockchain interface with the ",(0,o.kt)("inlineCode",{parentName:"p"},"VMContext")," which is either initialized through ",(0,o.kt)("inlineCode",{parentName:"p"},"VMContextBuilder")," or manually through itself."),(0,o.kt)("admonition",{title:"Note",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"This ",(0,o.kt)("inlineCode",{parentName:"p"},"testing_env!")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"VMContext")," is only used for testing outside of ",(0,o.kt)("inlineCode",{parentName:"p"},"wasm")," environments. When running the built contract on a network in a ",(0,o.kt)("inlineCode",{parentName:"p"},"wasm")," environment, the context from the blockchain will be used through host functions on the runtime.")),(0,o.kt)("p",null,"To test read-only function calls, set ",(0,o.kt)("inlineCode",{parentName:"p"},"is_view")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," on the ",(0,o.kt)("inlineCode",{parentName:"p"},"VMContext"),". This will test to verify that function calls which just read state do not try to modify state through unit tests. In the above example, ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," should be passed into the ",(0,o.kt)("inlineCode",{parentName:"p"},"get_context")," call, which initializes the context as read-only."),(0,o.kt)("p",null,"You will want to use ",(0,o.kt)("inlineCode",{parentName:"p"},"testing_env!")," each time you need to update this context, such as mocking the ",(0,o.kt)("inlineCode",{parentName:"p"},"predecessor_accound_id")," to simulate the functions being called by or only allowing view operations as mentioned above. Each time this is done, a new mocked blockchain will be initialized while keeping the existing state."))}m.isMDXComponent=!0}}]);