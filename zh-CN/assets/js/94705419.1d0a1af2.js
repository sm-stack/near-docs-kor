"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1011],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=u(n),f=o,h=p["".concat(c,".").concat(f)]||p[f]||d[f]||s;return n?r.createElement(h,a(a({ref:t},l),{},{components:n})):r.createElement(h,a({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var u=2;u<s;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},69120:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>f,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var r=n(87462),o=n(63366),s=(n(67294),n(3905)),a=["components"],i={sidebar_position:3},c="Collections Nesting",u={unversionedId:"sdk/rust/contract-structure/nesting",id:"sdk/rust/contract-structure/nesting",title:"Collections Nesting",description:"Traditional approach for unique prefixes",source:"@site/../docs/sdk/rust/contract-structure/nesting.md",sourceDirName:"sdk/rust/contract-structure",slug:"/sdk/rust/contract-structure/nesting",permalink:"/near-docs-kor/zh-CN/sdk/rust/contract-structure/nesting",draft:!1,editUrl:"https://github.com/near/docs/edit/master/website/../docs/sdk/rust/contract-structure/nesting.md",tags:[],version:"current",lastUpdatedBy:"[sm-stack]",lastUpdatedAt:1675844989,formattedLastUpdatedAt:"2023\u5e742\u67088\u65e5",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"sdk",previous:{title:"Collections",permalink:"/near-docs-kor/zh-CN/sdk/rust/contract-structure/collections"},next:{title:"Public Method Types",permalink:"/near-docs-kor/zh-CN/sdk/rust/contract-interface/public-methods"}},l={},d=[{value:"Traditional approach for unique prefixes",id:"traditional-approach-for-unique-prefixes",level:2},{value:"Generating unique prefixes for persistent collections",id:"generating-unique-prefixes-for-persistent-collections",level:2},{value:"Error prone patterns",id:"error-prone-patterns",level:2}],p={toc:d};function f(e){var t=e.components,n=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"collections-nesting"},"Collections Nesting"),(0,s.kt)("h2",{id:"traditional-approach-for-unique-prefixes"},"Traditional approach for unique prefixes"),(0,s.kt)("p",null,"Hardcoded prefixes in the constructor using a short one letter prefix that was converted to a vector of bytes.\nWhen using nested collection, the prefix must be constructed manually."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};\nuse near_sdk::collections::{UnorderedMap, UnorderedSet};\nuse near_sdk::{near_bindgen, AccountId};\n\n#[near_bindgen]\n#[derive(BorshDeserialize, BorshSerialize)]\npub struct Contract {\n    pub accounts: UnorderedMap<AccountId, UnorderedSet<String>>,\n}\n\nimpl Default for Contract {\n    fn default() -> Self {\n        Self {\n            accounts: UnorderedMap::new(b"t"),\n        }\n    }\n}\n\n#[near_bindgen]\nimpl Contract {\n    pub fn get_tokens(&self, account_id: &AccountId) -> UnorderedSet<String> {\n        let tokens = self.accounts.get(account_id).unwrap_or_else(|| {\n            // Constructing a unique prefix for a nested UnorderedSet from a concatenation\n            // of a prefix and a hash of the account id.\n            let prefix: Vec<u8> = [\n                b"s".as_slice(),\n                &near_sdk::env::sha256_array(account_id.as_bytes()),\n            ]\n            .concat();\n            UnorderedSet::new(prefix)\n        });\n        tokens\n    }\n}\n')),(0,s.kt)("h2",{id:"generating-unique-prefixes-for-persistent-collections"},"Generating unique prefixes for persistent collections"),(0,s.kt)("p",null,"Read more about persistent collections ",(0,s.kt)("a",{parentName:"p",href:"/near-docs-kor/zh-CN/sdk/rust/contract-structure/collections"},"from this documentation")," or from ",(0,s.kt)("a",{parentName:"p",href:"https://docs.rs/near-sdk/latest/near_sdk/collections"},"the Rust docs"),"."),(0,s.kt)("p",null,"Every instance of a persistent collection requires a unique storage prefix.\nThe prefix is used to generate internal keys to store data in persistent storage.\nThese internal keys need to be unique to avoid collisions (including collisions with key ",(0,s.kt)("inlineCode",{parentName:"p"},"STATE"),")."),(0,s.kt)("p",null,"When a contract gets complicated, there may be multiple different\ncollections that are not all part of the main structure, but instead part of a sub-structure or nested collections.\nThey all need to have unique prefixes."),(0,s.kt)("p",null,"We can introduce an ",(0,s.kt)("inlineCode",{parentName:"p"},"enum")," for tracking storage prefixes and keys.\nAnd then use borsh serialization to construct a unique prefix for every collection.\nIt's as efficient as manually constructing them, because with Borsh serialization, an enum only takes one byte."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},"use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};\nuse near_sdk::collections::{UnorderedMap, UnorderedSet};\nuse near_sdk::{env, near_bindgen, AccountId, BorshStorageKey, CryptoHash};\n\n#[near_bindgen]\n#[derive(BorshDeserialize, BorshSerialize)]\npub struct Contract {\n    pub accounts: UnorderedMap<AccountId, UnorderedSet<String>>,\n}\n\nimpl Default for Contract {\n    fn default() -> Self {\n        Self {\n            accounts: UnorderedMap::new(StorageKeys::Accounts),\n        }\n    }\n}\n\n#[derive(BorshStorageKey, BorshSerialize)]\npub enum StorageKeys {\n    Accounts,\n    SubAccount { account_hash: CryptoHash },\n}\n\n#[near_bindgen]\nimpl Contract {\n    pub fn get_tokens(&self, account_id: &AccountId) -> UnorderedSet<String> {\n        let tokens = self.accounts.get(account_id).unwrap_or_else(|| {\n            UnorderedSet::new(StorageKeys::SubAccount {\n                account_hash: env::sha256_array(account_id.as_bytes()),\n            })\n        });\n        tokens\n    }\n}\n")),(0,s.kt)("h2",{id:"error-prone-patterns"},"Error prone patterns"),(0,s.kt)("p",null,"By extension of the error-prone patterns to avoid mentioned in the ",(0,s.kt)("a",{parentName:"p",href:"/near-docs-kor/zh-CN/sdk/rust/contract-structure/collections#error-prone-patterns"},"collections section"),", it is important to keep in mind how these bugs can easily be introduced into a contract when using nested collections."),(0,s.kt)("p",null,"Some issues for more context:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/near/near-sdk-rs/issues/560"},"https://github.com/near/near-sdk-rs/issues/560")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/near/near-sdk-rs/issues/703"},"https://github.com/near/near-sdk-rs/issues/703"))),(0,s.kt)("p",null,"The following cases are the most commonly encountered bugs that cannot be restricted at the type level:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'use near_sdk::borsh::{self, BorshSerialize};\nuse near_sdk::collections::{LookupMap, UnorderedSet};\nuse near_sdk::BorshStorageKey;\n\n#[derive(BorshStorageKey, BorshSerialize)]\npub enum StorageKey {\n    Root,\n    Nested(u8),\n}\n\n// Bug 1: Nested collection is removed without clearing it\'s own state.\nlet mut root: LookupMap<u8, UnorderedSet<String>> = LookupMap::new(StorageKey::Root);\nlet mut nested = UnorderedSet::new(StorageKey::Nested(1));\nnested.insert(&"test".to_string());\nroot.insert(&1, &nested);\n\n// Remove inserted collection without clearing it\'s sub-state.\nlet mut _removed = root.remove(&1).unwrap();\n\n// This line would fix the bug:\n// _removed.clear();\n\n// This collection will now be in an inconsistent state if an empty UnorderedSet is put\n// in the same entry of `root`.\nroot.insert(&1, &UnorderedSet::new(StorageKey::Nested(1)));\nlet n = root.get(&1).unwrap();\nassert!(n.is_empty());\nassert!(n.contains(&"test".to_string()));\n\n// Bug 2 (only relevant for `near_sdk::collections`, not `near_sdk::store`): Nested\n// collection is modified without updating the collection itself in the outer collection.\n//\n// This is fixed at the type level in `near_sdk::store` because the values are modified\n// in-place and guarded by regular Rust borrow-checker rules.\nroot.insert(&2, &UnorderedSet::new(StorageKey::Nested(2)));\n\nlet mut nested = root.get(&2).unwrap();\nnested.insert(&"some value".to_string());\n\n// This line would fix the bug:\n// root.insert(&2, &nested);\n\nlet n = root.get(&2).unwrap();\nassert!(n.is_empty());\nassert!(n.contains(&"some value".to_string()));\n')))}f.isMDXComponent=!0}}]);