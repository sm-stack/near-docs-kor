"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6798],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=c(n),u=r,m=h["".concat(l,".").concat(u)]||h[u]||d[u]||o;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},34151:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>h});var a=n(87462),r=n(63366),o=(n(67294),n(3905));const i=n.p+"assets/images/near-and-react--dakila.near--rodolf_dtbbx-1fc086945b950cbd1704332896807a9c.png";var s=["components"],l={sidebar_position:5,sidebar_label:"Add simple frontend",title:"Add a simple frontend to the crossword puzzle that checks the solution's hash"},c="Add a simple frontend",p={unversionedId:"tutorials/crosswords/basics/simple-frontend",id:"tutorials/crosswords/basics/simple-frontend",title:"Add a simple frontend to the crossword puzzle that checks the solution's hash",description:"",source:"@site/../docs/3.tutorials/crosswords/01-basics/04-simple-frontend.md",sourceDirName:"3.tutorials/crosswords/01-basics",slug:"/tutorials/crosswords/basics/simple-frontend",permalink:"/near-docs-kor/zh-CN/tutorials/crosswords/basics/simple-frontend",draft:!1,editUrl:"https://github.com/near/docs/edit/master/website/../docs/3.tutorials/crosswords/01-basics/04-simple-frontend.md",tags:[],version:"current",lastUpdatedBy:"[sm-stack]",lastUpdatedAt:1675844989,formattedLastUpdatedAt:"2023\u5e742\u67088\u65e5",sidebarPosition:5,frontMatter:{sidebar_position:5,sidebar_label:"Add simple frontend",title:"Add a simple frontend to the crossword puzzle that checks the solution's hash"},sidebar:"tutorials",previous:{title:"Hash the solution, unit tests, and an init method",permalink:"/near-docs-kor/zh-CN/tutorials/crosswords/basics/hashing-and-unit-tests"},next:{title:"Overview",permalink:"/near-docs-kor/zh-CN/tutorials/crosswords/beginner/overview"}},d={},h=[{value:"Entry point",id:"entry-point",level:2},{value:"React app",id:"react-app",level:2},{value:"Utility functions",id:"utility-functions",level:2},{value:"Run the React app",id:"run-the-react-app",level:2}],u={toc:h};function m(e){var t=e.components,l=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"add-a-simple-frontend"},"Add a simple frontend"),(0,o.kt)("p",null,"This will be the final section in this chapter, where we'll add a simple frontend using React and ",(0,o.kt)("a",{parentName:"p",href:"https://docs.near.org/tools/near-api-js/quick-reference"},(0,o.kt)("inlineCode",{parentName:"a"},"near-api-js"))," to communicate with the smart contract."),(0,o.kt)("figure",null,(0,o.kt)("img",{src:i,alt:"Two characters hanging out, NEAR and React. Art created by dakila.near",width:"600"}),(0,o.kt)("figcaption",null,"Dynamic duo of NEAR as the backend and React as a frontend.",(0,o.kt)("br",null),"Art by ",(0,o.kt)("a",{href:"https://twitter.com/rodolf_dtbbx",target:"_blank"},"dakila.near"))),(0,o.kt)("br",null),(0,o.kt)("p",null,"There will be three main files we'll be working with:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"src/index.js")," will be the entry point, where NEAR network configuration will be set up, and the view-only call to ",(0,o.kt)("inlineCode",{parentName:"li"},"get_solution")," will happen."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"src/App.js")," is then called and sets up the crossword table and checks to see if a solution has been found."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"src/utils.js")," is used to make a view-only call to the blockchain to get the solution, and other helper functions.")),(0,o.kt)("h2",{id:"entry-point"},"Entry point"),(0,o.kt)("p",null,"We'll go over a pattern that may look familiar to folks who have surveyed the ",(0,o.kt)("a",{parentName:"p",href:"https://near.dev"},"NEAR examples site"),". We'll start with an asynchronous JavaScript function that sets up desired logic, then pass that to the React app."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"reference",reference:!0},"https://github.com/near-examples/crossword-tutorial-chapter-1/blob/3e497b4815600b8382614f76c7812520710f704d/src/index.js#L3-L22\n")),(0,o.kt)("p",null,"Let's talk through the code above, starting with the imports."),(0,o.kt)("p",null,"We import from:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"config.js")," which, at the moment, is a common pattern. This file contains details on the different networks. (Which RPC endpoint to hit, which NEAR Wallet site to redirect to, which NEAR Explorer as well\u2026)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"utils.js")," for that view-only function call that will call ",(0,o.kt)("inlineCode",{parentName:"li"},"get_solution")," to retrieve the correct solution hash when a person has completed the crossword puzzle correctly."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"hardcoded-data.js")," is a file containing info on the crossword puzzle clues. This chapter has covered the crossword puzzle where the solution is ",(0,o.kt)("strong",{parentName:"li"},"near nomicon ref finance"),", and according to the chapter overview we've committed to serving ",(0,o.kt)("em",{parentName:"li"},"one")," puzzle. We'll improve our smart contract later, allowing for multiple crossword puzzles, but for now it's hardcoded here.")),(0,o.kt)("p",null,"Next, we define an asynchronous function called ",(0,o.kt)("inlineCode",{parentName:"p"},"initCrossword")," that will be called before passing data to the React app. It's often useful to set up a connection with the blockchain here, but in our case all we need to do is retrieve the crossword puzzle solution as a hash. Note that we're attempting to pass this environment variable ",(0,o.kt)("inlineCode",{parentName:"p"},"NEAR_ENV")," into our configuration file. ",(0,o.kt)("inlineCode",{parentName:"p"},"NEAR_ENV")," is used to designate the blockchain network (testnet, betanet, mainnet) and is also ",(0,o.kt)("a",{parentName:"p",href:"https://docs.near.org/develop/deploy"},"used in NEAR CLI"),". "),(0,o.kt)("p",null,"Lastly, we'll call ",(0,o.kt)("inlineCode",{parentName:"p"},"initCrossword")," and, when everything is complete, pass data to the React app contained in ",(0,o.kt)("inlineCode",{parentName:"p"},"App.js"),"."),(0,o.kt)("h2",{id:"react-app"},"React app"),(0,o.kt)("p",null,"Here's a large portion of the ",(0,o.kt)("inlineCode",{parentName:"p"},"App.js")," file, which will make use of a fork of a React crossword library by Jared Reisinger."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"reference",reference:!0},"https://github.com/near-examples/crossword-tutorial-chapter-1/blob/3e497b4815600b8382614f76c7812520710f704d/src/App.js#L3-L54\n")),(0,o.kt)("p",null,"We'll discuss a few key points in the code above, but seeing as we're here to focus on a frontend connection to the blockchain, will brush over other parts that are library-specific."),(0,o.kt)("p",null,"The two imports worth highlighting are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"parseSolutionSeedPhrase")," from the utility file we'll cover shortly. This will take the solution entered by the user and put it in the correct order according to the rules discussed in ",(0,o.kt)("a",{parentName:"li",href:"/near-docs-kor/zh-CN/tutorials/crosswords/basics/overview#how-it-works"},"the chapter overview"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"sha256")," will take the ordered solution from above and hash it. Then we'll compare that hash with the one retrieved from the smart contract.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const [solutionFound, setSolutionFound] = useState(false);\n")),(0,o.kt)("p",null,"We're using ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-state.html"},"React Hooks")," here, setting up the variable ",(0,o.kt)("inlineCode",{parentName:"p"},"solutionFound")," that will be changed when the player of the crossword puzzle enters the final letter of the crossword puzzle, having entries for all the letters on the board."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"onCrosswordComplete")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"checkSolution")," blocks of code fire events to check the final solution entered by the user, hash it, and compare it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"solutionHash")," that was passed in from the view-only call in ",(0,o.kt)("inlineCode",{parentName:"p"},"index.js")," earlier."),(0,o.kt)("p",null,"Finally, we return the ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/introducing-jsx.html"},"JSX")," for our app and render the crossword puzzle! In this basic case we'll change this heading to indicate when the user has completed the puzzle successfully:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},"<h3>Status: { solutionFound }</h3>\n")),(0,o.kt)("h2",{id:"utility-functions"},"Utility functions"),(0,o.kt)("p",null,"We'll be using two utility functions here:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"parseSolutionSeedPhrase")," which will take a completed crossword puzzle and place the answers in the proper order. (Ascending by number, across answers come before down ones.)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"viewMethodOnContract")," makes the view-only call to the smart contract to retrieve the solution hash.")),(0,o.kt)("p",null,"We'll only focus on the second method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"reference",reference:!0},"https://github.com/near-examples/crossword-tutorial-chapter-1/blob/3e497b4815600b8382614f76c7812520710f704d/src/utils.js#L8-L12\n")),(0,o.kt)("p",null,"This API doesn't look warm and friendly yet. You caught us! We'd love some help to improve our API as ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/near/near-api-js/issues/612"},"detailed in this issue"),", but for now, this is a concise way to get data from a view-only method."),(0,o.kt)("p",null,"We haven't had the frontend call a mutable method for our project yet. We'll get into that in the coming chapters when we'll want to have a prize sent to the first person to solve the puzzle."),(0,o.kt)("h2",{id:"run-the-react-app"},"Run the React app"),(0,o.kt)("p",null,"Let's run our frontend on testnet! We won't add any new concepts at this point in the chapter, but note that the ",(0,o.kt)("a",{parentName:"p",href:"https://near.dev"},"near examples")," typically create an account for you automatically with a NodeJS command. We covered the important pattern of creating a subaccount and deploying the smart contract to it, so let's stick with that pattern as we start up our frontend."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Go into the directory containing the Rust smart contract we've been working on\ncd contract\n\n# Build (for Windows it's build.bat)\n./build.sh\n\n# Create fresh account if you wish, which is good practice\nnear delete crossword.friend.testnet friend.testnet\nnear create-account crossword.friend.testnet --masterAccount friend.testnet\n\n# Deploy\nnear deploy crossword.friend.testnet --wasmFile res/my_crossword.wasm \\\n  --initFunction 'new' \\\n  --initArgs '{\"solution\": \"69c2feb084439956193f4c21936025f14a5a5a78979d67ae34762e18a7206a0f\"}'\n  \n# Return to the project root and start the React app\ncd ..\nenv CONTRACT_NAME=crossword.friend.testnet npm run start\n")),(0,o.kt)("p",null,"The last line sends the environment variable ",(0,o.kt)("inlineCode",{parentName:"p"},"CONTRACT_NAME")," into the NodeJS script. This is picked up in the ",(0,o.kt)("inlineCode",{parentName:"p"},"config.js")," file that's used to set up the contract account and network configuration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"reference",reference:!0},"https://github.com/near-examples/crossword-tutorial-chapter-1/blob/3e497b4815600b8382614f76c7812520710f704d/src/config.js#L1\n")),(0,o.kt)("p",null,"After running the last command to start the React app, you'll be given a link to a local website, like ",(0,o.kt)("inlineCode",{parentName:"p"},"https://localhost:1234"),". When you visit the site you'll see the simple frontend that interacts with our smart contract:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Crossword puzzle frontend showing a filled out puzzle with clues on the right sidebar",src:n(95759).Z,width:"775",height:"668"})),(0,o.kt)("p",null,"Again, the full code for this chapter is available at:"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/near-examples/crossword-tutorial-chapter-1"},"https://github.com/near-examples/crossword-tutorial-chapter-1")))}m.isMDXComponent=!0},95759:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/basics-final-frontend-3d07b12eae7c931a52ba5d874537e810.png"}}]);