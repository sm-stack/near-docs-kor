"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9274],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,h=u["".concat(s,".").concat(m)]||u[m]||p[m]||o;return n?r.createElement(h,i(i({ref:t},d),{},{components:n})):r.createElement(h,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},90996:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>c,metadata:()=>l,toc:()=>p});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],c={sidebar_position:1},s="Public Method Types",l={unversionedId:"sdk/rust/contract-interface/public-methods",id:"sdk/rust/contract-interface/public-methods",title:"Public Method Types",description:"Methods can be called externally by using the pub identifier within the #[near_bindgen] macro which will expose the method in the compiled WASM bytecode.",source:"@site/../docs/sdk/rust/contract-interface/public-methods.md",sourceDirName:"sdk/rust/contract-interface",slug:"/sdk/rust/contract-interface/public-methods",permalink:"/near-docs-kor/zh-CN/sdk/rust/contract-interface/public-methods",draft:!1,editUrl:"https://github.com/near/docs/edit/master/website/../docs/sdk/rust/contract-interface/public-methods.md",tags:[],version:"current",lastUpdatedBy:"[sm-stack]",lastUpdatedAt:1675844989,formattedLastUpdatedAt:"2023\u5e742\u67088\u65e5",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"sdk",previous:{title:"Collections Nesting",permalink:"/near-docs-kor/zh-CN/sdk/rust/contract-structure/nesting"},next:{title:"Contract Mutability",permalink:"/near-docs-kor/zh-CN/sdk/rust/contract-interface/contract-mutability"}},d={},p=[{value:"Exposing trait implementations",id:"exposing-trait-implementations",level:2}],u={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"public-method-types"},"Public Method Types"),(0,o.kt)("p",null,"Methods can be called externally by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"pub")," identifier within the ",(0,o.kt)("a",{parentName:"p",href:"/near-docs-kor/zh-CN/sdk/rust/contract-structure/near-bindgen"},(0,o.kt)("inlineCode",{parentName:"a"},"#[near_bindgen]")," macro")," which will expose the method in the compiled WASM bytecode."),(0,o.kt)("p",null,"It is important to only mark methods that should be called externally as public. If you need a contract to call itself, you can mark the function as public but add the ",(0,o.kt)("a",{parentName:"p",href:"/near-docs-kor/zh-CN/sdk/rust/contract-interface/private-methods"},(0,o.kt)("inlineCode",{parentName:"a"},"#[private]")," annotation")," so that it will panic if called from anything but the contract itself."),(0,o.kt)("p",null,"A basic usage of this would look like the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#[near_bindgen]\nimpl MyContractStructure {\n    pub fn some_method(&mut self) {\n        // .. method logic here\n    }\n}\n")),(0,o.kt)("p",null,"Where this would expose ",(0,o.kt)("inlineCode",{parentName:"p"},"some_method")," from the WASM binary and allow it to be called externally."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Expand to see generated code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#[cfg(target_arch = "wasm32")]\n#[no_mangle]\npub extern "C" fn some_method() {\n    near_sdk::env::setup_panic_hook();\n    if near_sdk::env::attached_deposit() != 0 {\n        near_sdk::env::panic("Method some_method doesn\\\'t accept deposit".as_bytes());\n    }\n    let mut contract: MyContractStructure = near_sdk::env::state_read().unwrap_or_default();\n    contract.some_method();\n    near_sdk::env::state_write(&contract);\n}\n'))),(0,o.kt)("h2",{id:"exposing-trait-implementations"},"Exposing trait implementations"),(0,o.kt)("p",null,"Functions can also be exposed through trait implementations. This can be useful if implementing a shared interface or standard for a contract. This code generation is handled very similarly to basic ",(0,o.kt)("inlineCode",{parentName:"p"},"pub")," functions, but the ",(0,o.kt)("inlineCode",{parentName:"p"},"#[near_bindgen]")," macro only needs to be attached to the trait implementation, not the trait itself:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"pub trait MyTrait {\n    fn trait_method(&mut self);\n}\n\n#[near_bindgen]\nimpl MyTrait for MyContractStructure {\n    fn trait_method(&mut self) {\n        // .. method logic here\n    }\n}\n")),(0,o.kt)("p",null,"In this example, the generated code will be the same as the previous example, except with a different method name."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Expand to see generated code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#[cfg(target_arch = "wasm32")]\n#[no_mangle]\npub extern "C" fn trait_method() {\n    near_sdk::env::setup_panic_hook();\n    if near_sdk::env::attached_deposit() != 0 {\n        near_sdk::env::panic("Method trait_method doesn\\\'t accept deposit".as_bytes());\n    }\n    let mut contract: MyContractStructure = near_sdk::env::state_read().unwrap_or_default();\n    contract.trait_method();\n    near_sdk::env::state_write(&contract);\n}\n'))))}m.isMDXComponent=!0}}]);