"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9033],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},84575:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],l={sidebar_position:1},s="near_bindgen",c={unversionedId:"sdk/rust/contract-structure/near-bindgen",id:"sdk/rust/contract-structure/near-bindgen",title:"near_bindgen",description:"The #[near_bindgen] macro is used on a struct and the function implementations to generate the necessary code to be a valid NEAR contract and expose the intended functions to be able to be called externally.",source:"@site/../docs/sdk/rust/contract-structure/near-bindgen.md",sourceDirName:"sdk/rust/contract-structure",slug:"/sdk/rust/contract-structure/near-bindgen",permalink:"/near-docs-kor/zh-CN/sdk/rust/contract-structure/near-bindgen",draft:!1,editUrl:"https://github.com/near/docs/edit/master/website/../docs/sdk/rust/contract-structure/near-bindgen.md",tags:[],version:"current",lastUpdatedBy:"[sm-stack]",lastUpdatedAt:1675844989,formattedLastUpdatedAt:"2023\u5e742\u67088\u65e5",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"sdk",previous:{title:"Getting Started",permalink:"/near-docs-kor/zh-CN/sdk/rust/introduction"},next:{title:"Collections",permalink:"/near-docs-kor/zh-CN/sdk/rust/contract-structure/collections"}},u={},d=[{value:"Initialization Methods",id:"initialization-methods",level:2},{value:"Payable Methods",id:"payable-methods",level:2},{value:"Private Methods",id:"private-methods",level:2}],p={toc:d};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"near_bindgen"},"near_bindgen"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"#[near_bindgen]")," macro is used on a ",(0,i.kt)("inlineCode",{parentName:"p"},"struct")," and the function implementations to generate the necessary code to be a valid NEAR contract and expose the intended functions to be able to be called externally."),(0,i.kt)("p",null,"For example, on a simple counter contract, the macro will be applied as such:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};\nuse near_sdk::near_bindgen;\n\n#[near_bindgen]\n#[derive(BorshDeserialize, BorshSerialize, Default)]\npub struct Counter {\n    value: u64,\n}\n\n#[near_bindgen]\nimpl Counter {\n    pub fn increment(&mut self) {\n        self.value += 1;\n    }\n\n    pub fn get_count(&self) -> u64 {\n        self.value\n    }\n}\n")),(0,i.kt)("p",null,"In this example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"Counter")," struct represents the smart contract state and anything that implements ",(0,i.kt)("inlineCode",{parentName:"p"},"BorshSerialize")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"BorshDeserialize")," can be included, even ",(0,i.kt)("inlineCode",{parentName:"p"},"collections"),", which will be covered in the next section. Whenever a function is called, the state will be loaded and deserialized, so it's important to keep this amount of data loaded as minimal as possible."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"#[near_bindgen]")," also annotates the ",(0,i.kt)("inlineCode",{parentName:"p"},"impl")," for ",(0,i.kt)("inlineCode",{parentName:"p"},"Counter")," and this will generate any necessary boilerplate to expose the functions. The core interactions that are important to keep in mind:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Any ",(0,i.kt)("inlineCode",{parentName:"li"},"pub")," functions will be callable externally from any account/contract.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"For more information, see ",(0,i.kt)("a",{parentName:"li",href:"/near-docs-kor/zh-CN/sdk/rust/contract-interface/public-methods"},"public methods")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"self")," can be used in multiple ways to control the ",(0,i.kt)("a",{parentName:"li",href:"/near-docs-kor/zh-CN/sdk/rust/contract-interface/contract-mutability"},"mutability of the contract"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Functions that take ",(0,i.kt)("inlineCode",{parentName:"li"},"&self")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"self")," will be read-only and do not write the updated state to storage"),(0,i.kt)("li",{parentName:"ul"},"Functions that take ",(0,i.kt)("inlineCode",{parentName:"li"},"&mut self")," allow for mutating state, and state will always be written back at the end of the function call"))),(0,i.kt)("li",{parentName:"ul"},"Exposed functions can omit reading and writing to state if ",(0,i.kt)("inlineCode",{parentName:"li"},"self")," is not included in the function params",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This can be useful for some static functionality or returning data embedded in the contract code"))),(0,i.kt)("li",{parentName:"ul"},"If the function has a return value, it will be serialized and attached as a result through ",(0,i.kt)("inlineCode",{parentName:"li"},"env::value_return"))),(0,i.kt)("h2",{id:"initialization-methods"},"Initialization Methods"),(0,i.kt)("p",null,"By default, the ",(0,i.kt)("inlineCode",{parentName:"p"},"Default::default()")," implementation of a contract will be used to initialize a contract. There can be a custom initialization function which takes parameters or performs custom logic with the following ",(0,i.kt)("inlineCode",{parentName:"p"},"#[init]")," annotation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'#[near_bindgen]\nimpl Counter {\n    #[init]\n    pub fn new(value: u64) -> Self {\n        log!("Custom counter initialization!");\n        Self { value }\n    }\n}\n')),(0,i.kt)("p",null,"All contracts are expected to implement ",(0,i.kt)("inlineCode",{parentName:"p"},"Default"),". If you would like to prohibit the default implementation from being used, the ",(0,i.kt)("inlineCode",{parentName:"p"},"PanicOnDefault")," derive macro can be used:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"#[near_bindgen]\n#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]\npub struct Counter {\n    // ...\n}\n")),(0,i.kt)("h2",{id:"payable-methods"},"Payable Methods"),(0,i.kt)("p",null,"Methods can be annotated with ",(0,i.kt)("inlineCode",{parentName:"p"},"#[payable]")," to allow tokens to be transferred with the method invocation. For more information, see ",(0,i.kt)("a",{parentName:"p",href:"/near-docs-kor/zh-CN/sdk/rust/contract-interface/payable-methods"},"payable methods"),"."),(0,i.kt)("p",null,"To declare a function as payable, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"#[payable]")," annotation as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"#[payable]\npub fn my_method(&mut self) {\n...\n}\n")),(0,i.kt)("h2",{id:"private-methods"},"Private Methods"),(0,i.kt)("p",null,"Some methods need to be exposed to allow the contract to call a method on itself through a promise, but want to disallow any other contract to call it. For this, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"#[private]")," annotation to panic when this method is called externally. See ",(0,i.kt)("a",{parentName:"p",href:"/near-docs-kor/zh-CN/sdk/rust/contract-interface/private-methods"},"private methods")," for more information."),(0,i.kt)("p",null,"This annotation can be applied to any method through the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"#[private]\npub fn my_method(&mut self) {\n...\n}\n")))}m.isMDXComponent=!0}}]);